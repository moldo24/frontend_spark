.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
// src/App.jsx
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Home from "./pages/Home.jsx";
import Login from "./pages/Login.jsx";
import Register from "./pages/Register.jsx";
import Dashboard from "./pages/Dashboard.jsx";
import OAuth2RedirectHandler from "./pages/OAuth2RedirectHandler.jsx";
import PrivateRoute from "./components/PrivateRoute.jsx";
import AdminRoute from "./components/AdminRoute.jsx";
import Navbar from "./pages/Navbar.jsx";
import AdminUsers from "./pages/AdminUsers.jsx";
import MyProfile from "./pages/MyProfile.jsx";
import BrandRequestPage from "./pages/BrandRequestPage.jsx";
import BrandRequestsAdmin from "./pages/BrandRequestsAdmin.jsx"; // âœ… correct file name

export default function App() {
  return (
    <Router>
      <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />

        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="/oauth2/redirect" element={<OAuth2RedirectHandler />} />

        <Route
          path="/dashboard"
          element={
            <PrivateRoute>
              <Dashboard />
            </PrivateRoute>
          }
        />

        <Route
          path="/profile"
          element={
            <PrivateRoute>
              <MyProfile />
            </PrivateRoute>
          }
        />

        <Route
          path="/request-brand"
          element={
            <PrivateRoute>
              <BrandRequestPage />
            </PrivateRoute>
          }
        />

        <Route
          path="/admin"
          element={
            <AdminRoute>
              <AdminUsers />
            </AdminRoute>
          }
        />

        <Route
          path="/admin/brand-requests"
          element={
            <AdminRoute>
              <BrandRequestsAdmin />
            </AdminRoute>
          }
        />

        {/* Optional: 404 fallback */}
        <Route path="*" element={<div style={{ padding: 24 }}>Not found</div>} />
      </Routes>
    </Router>
  );
}
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
// src/config.js
export const USER_API_BASE = process.env.REACT_APP_USER_API_BASE || "http://localhost:8080";
export const STORE_API_BASE = process.env.REACT_APP_STORE_API_BASE || "http://localhost:8081";

// kept for backwards compatibility / existing auth/user code
export const API_BASE = USER_API_BASE;

export const AUTH = {
  LOGIN: `${USER_API_BASE}/auth/login`,
  REGISTER: `${USER_API_BASE}/auth/register`,
  ME: `${USER_API_BASE}/auth/me`,
  UPLOAD_IMAGE: `${USER_API_BASE}/auth/me/image`,
  GET_IMAGE: `${USER_API_BASE}/auth/me/image`,
};

export const OAUTH2 = {
  GOOGLE: `${USER_API_BASE}/oauth2/authorize/google`,
  GITHUB: `${USER_API_BASE}/oauth2/authorize/github`,
};

export const BRAND = {
  BASE: STORE_API_BASE,
  LIST: (q = "") => {
    if (q && q.trim()) {
      return `${STORE_API_BASE}/brands?q=${encodeURIComponent(q.trim())}`;
    }
    return `${STORE_API_BASE}/brands`;
  },
};

export const BRAND_REQUESTS = {
  LIST: (status = "") =>
    status && status.trim()
      ? `${STORE_API_BASE}/brands/requests?status=${encodeURIComponent(status.trim())}`
      : `${STORE_API_BASE}/brands/requests`,
  APPROVE: (id) => `${STORE_API_BASE}/brands/requests/${id}/approve`,
  REJECT:  (id) => `${STORE_API_BASE}/brands/requests/${id}/reject`,
  MINE:    () => `${STORE_API_BASE}/brands/requests/mine`,
  LOGO_PUT: (id) => `${STORE_API_BASE}/brands/requests/${id}/logo`,
  LOGO_GET: (id) => `${STORE_API_BASE}/brands/requests/${id}/logo`,
};
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "../css/global.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
// src/components/AdminRoute.jsx
import { useState, useEffect } from "react";
import { Navigate } from "react-router-dom";
import { isAuthenticated, fetchWithAuth, logout } from "../utils/auth.js";
import { API_BASE } from "../config.js";

export default function AdminRoute({ children }) {
  const [status, setStatus] = useState({ loading: true, isAdmin: false });

  useEffect(() => {
    (async () => {
      if (!isAuthenticated()) {
        setStatus({ loading: false, isAdmin: false });
        return;
      }
      try {
        const res = await fetchWithAuth(`${API_BASE}/auth/me`);
        if (!res.ok) {
          logout();
          setStatus({ loading: false, isAdmin: false });
          return;
        }
        const user = await res.json();
        setStatus({ loading: false, isAdmin: user.role === "ADMIN" });
      } catch (e) {
        console.warn("AdminRoute fetch failed", e);
        setStatus({ loading: false, isAdmin: false });
      }
    })();
  }, []);

  if (status.loading) return <div>Loading...</div>;
  if (!isAuthenticated() || !status.isAdmin) {
    return <Navigate to="/dashboard" replace />;
  }
  return children;
}
// src/components/Avatar.jsx
import { useEffect, useState } from "react";
import { fetchWithAuth } from "../utils/auth.js";
import { AUTH } from "../config.js";

export default function Avatar({ imageUrl, size = 64, alt, name }) {
  const [src, setSrc] = useState("/default-avatar.png");
  const displayName = (name || alt || "").trim();
  const initial = displayName ? displayName[0].toUpperCase() : "";

  useEffect(() => {
    let cancelled = false;
    let objectUrl; // for blob URL

    const cleanup = () => {
      if (objectUrl) {
        URL.revokeObjectURL(objectUrl);
        objectUrl = null;
      }
    };

    if (!imageUrl) {
      setSrc("/default-avatar.png");
      return () => {
        cancelled = true;
        cleanup();
      };
    }

    const isLocalSentinel =
      imageUrl.startsWith(AUTH.GET_IMAGE) ||
      imageUrl === AUTH.GET_IMAGE ||
      imageUrl.startsWith(`${window.location.origin}/auth/me/image`);

    if (isLocalSentinel) {
      (async () => {
        try {
          const res = await fetchWithAuth(imageUrl);
          if (!res.ok) throw new Error("failed to fetch local avatar");
          const blob = await res.blob();
          objectUrl = URL.createObjectURL(blob);
          if (!cancelled) setSrc(objectUrl);
        } catch (e) {
          console.warn("Avatar load error:", e);
          if (!cancelled) setSrc("/default-avatar.png");
        }
      })();
    } else {
      // remote (Google/GitHub) public URL
      setSrc(imageUrl);
    }

    return () => {
      cancelled = true;
      cleanup();
    };
  }, [imageUrl]);

  // If no real image and we have a name/alt, show initial instead of img
  const isFallbackImage = src === "/default-avatar.png" || !src;
  if (isFallbackImage && initial) {
    return (
      <div
        aria-label={displayName}
        title={displayName}
        style={{
          width: size,
          height: size,
          borderRadius: "50%",
          background: "#6366f1",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          fontSize: size * 0.5,
          color: "#fff",
          fontWeight: "700",
          userSelect: "none",
          flexShrink: 0,
        }}
      >
        {initial}
      </div>
    );
  }

  // final image render (either fetched or default avatar)
  return (
    <div
      style={{
        width: size,
        height: size,
        borderRadius: "50%",
        overflow: "hidden",
        flexShrink: 0,
        background: "#f0f2f7",
        display: "inline-block",
      }}
    >
      <img
        src={src}
        alt={alt || displayName || "avatar"}
        width={size}
        height={size}
        style={{ objectFit: "cover", display: "block" }}
        onError={() => setSrc("/default-avatar.png")}
      />
    </div>
  );
}
import { Navigate } from "react-router-dom";
import { isAuthenticated } from "../utils/auth.js";

export default function PrivateRoute({ children }) {
  if (!isAuthenticated()) {
    return <Navigate to="/login" replace />;
  }
  return children;
}
import { useState, useEffect } from "react";
import Avatar from "./Avatar.jsx";
import { fetchWithAuth } from "../utils/auth.js";
import { AUTH } from "../config.js";

export default function ProfileImageUploader({ currentUrl, onUpdate, size = 64, name }) {
  const [localFile, setLocalFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState(null);
  const [remoteUrl, setRemoteUrl] = useState(currentUrl);

  useEffect(() => {
    if (!localFile) {
      setRemoteUrl(currentUrl);
    }
  }, [currentUrl, localFile]);

  // object URL for preview when selecting new file
  const [objectUrl, setObjectUrl] = useState(null);
  useEffect(() => {
    if (localFile) {
      const url = URL.createObjectURL(localFile);
      setObjectUrl(url);
      return () => {
        URL.revokeObjectURL(url);
        setObjectUrl(null);
      };
    } else {
      setObjectUrl(null);
    }
  }, [localFile]);

  const preview = objectUrl
    ? objectUrl
    : remoteUrl
    ? remoteUrl
    : "/default-avatar.png";

  const handleFile = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    if (!["image/png", "image/jpeg"].includes(file.type)) {
      setError("Only PNG/JPEG allowed");
      return;
    }
    if (file.size > 2 * 1024 * 1024) {
      setError("Max 2MB");
      return;
    }
    setError(null);
    setLocalFile(file);
    setUploading(true);
    try {
      const form = new FormData();
      form.append("image", file);
      const res = await fetchWithAuth(AUTH.UPLOAD_IMAGE, {
        method: "POST",
        body: form,
      });
      if (!res.ok) {
        const body = await res.json().catch(() => ({}));
        throw new Error(body.error || "Upload failed");
      }
      const body = await res.json();
      onUpdate && onUpdate(body.imageUrl);
      setLocalFile(null); // clear local to reflect stored version
    } catch (err) {
      setError(err.message);
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="profile-uploader" style={{ marginBottom: 8 }}>
      <div style={{ display: "flex", alignItems: "center", gap: 12 }}>
        <Avatar imageUrl={preview} size={size} alt={name || "avatar"} />
        <div style={{ display: "flex", flexDirection: "column", gap: 4 }}>
          <label
            style={{
              cursor: "pointer",
              padding: "6px 12px",
              borderRadius: 6,
              background: "#eef2fd",
              fontSize: 14,
              display: "inline-block",
              fontWeight: 600,
            }}
          >
            Change image
            <input
              type="file"
              accept="image/png,image/jpeg"
              onChange={handleFile}
              style={{ display: "none" }}
              disabled={uploading}
            />
          </label>
          {uploading && (
            <div style={{ fontSize: 12, color: "#555" }}>Uploading...</div>
          )}
          {error && (
            <div style={{ color: "crimson", fontSize: 12 }}>{error}</div>
          )}
        </div>
      </div>
    </div>
  );
}
// src/components/UserRoute.jsx
import { useState, useEffect } from "react";
import { Navigate } from "react-router-dom";
import { isAuthenticated, fetchWithAuth, logout } from "../utils/auth";
import { API_BASE } from "../config";

export default function UserRoute({ children }) {
  const [status, setStatus] = useState({ loading: true, isUser: false });

  useEffect(() => {
    (async () => {
      if (!isAuthenticated()) {
        setStatus({ loading: false, isUser: false });
        return;
      }
      try {
        const res = await fetchWithAuth(`${API_BASE}/auth/me`);
        const user = await res.json();
        setStatus({ loading: false, isUser: user.role === "USER" });
      } catch {
        logout();
        setStatus({ loading: false, isUser: false });
      }
    })();
  }, []);

  if (status.loading) return <div>Loading...</div>;
  if (!status.isUser) return <Navigate to="/dashboard" replace />;
  return children;
}
// src/components/admin/BrandSearchSelect.jsx
import { useState, useEffect, useRef } from "react";
import { BRAND } from "../../config.js";
import { fetchWithAuth } from "../../utils/auth.js";

export default function BrandSearchSelect({ selected, onSelect, disabled }) {
  const [query, setQuery] = useState("");
  const [suggestions, setSuggestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const debounceRef = useRef(null);

  useEffect(() => {
    // debounce and fetch (including empty query => all)
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      setLoading(true);
      try {
        const url = BRAND.LIST(query);
        // fetchWithAuth is expected to attach Authorization: Bearer <token>
        const res = await fetchWithAuth(url);
        if (res.ok) {
          const list = await res.json();
          setSuggestions(list.slice(0, 10));
        } else {
          setSuggestions([]);
        }
      } catch (e) {
        setSuggestions([]);
      } finally {
        setLoading(false);
      }
    }, 300);

    return () => clearTimeout(debounceRef.current);
  }, [query]);

  return (
    <div className="brand-search-select">
      <label>Brand</label>
      <div className="search-wrapper">
        <input
          placeholder="Search brands..."
          value={selected ? selected.name : query}
          onChange={(e) => {
            setQuery(e.target.value);
            onSelect(null);
          }}
          disabled={disabled}
          autoComplete="off"
        />
        {loading && <div className="loader-inline">â€¦</div>}
      </div>
      {suggestions.length > 0 && !selected && (
        <ul className="suggestions">
          {suggestions.map((b) => (
            <li
              key={b.id}
              onClick={() => {
                onSelect(b);
                setQuery("");
                setSuggestions([]);
              }}
            >
              {b.name} ({b.slug})
            </li>
          ))}
        </ul>
      )}
      {selected && (
        <div className="selected-brand">
          <span>{selected.name}</span>
          <button
            type="button"
            onClick={() => {
              onSelect(null);
            }}
            disabled={disabled}
            aria-label="Clear brand"
          >
            Ã—
          </button>
        </div>
      )}
    </div>
  );
}
// src/components/admin/ProviderIcon.jsx
import React from "react";

export default function ProviderIcon({ provider, size = 16 }) {
  const style = {
    width: size,
    height: size,
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    marginRight: 4,
  };

  if (provider === "GITHUB") {
    return (
      <div aria-label="GitHub" style={style}>
        <svg
          aria-hidden="true"
          viewBox="0 0 16 16"
          width={size}
          height={size}
          fill="currentColor"
          style={{ color: "#24292f" }}
        >
          <path
            fillRule="evenodd"
            d="M8 0C3.58 0 0 3.58 0 8a8 8 0 005.47 7.59c.4.07.55-.17.55-.38 
            0-.19-.01-.82-.01-1.49-2 .37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 
            1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 
            0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 
            0 0 .67-.21 2.2.82a7.7 7.7 0 012-.27c.68.003 1.36.092 
            2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 
            2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 
            3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 
            1.93-.01 2.2 0 .21.15.46.55.38A8 8 0 0016 8c0-4.42-3.58-8-8-8z"
          />
        </svg>
      </div>
    );
  } else if (provider === "GOOGLE") {
    return (
      <div aria-label="Google" style={style}>
        <svg width={size} height={size} viewBox="0 0 46 46">
          <path
            fill="#4285F4"
            d="M23 20.5h11.3c-.5 2.5-2.2 4.6-4.5 5.7v4.7h7.3c4.3-4 
            6.8-10 6.8-16.9 0-1.1-.1-2.1-.3-3.1H23v6.3z"
          />
          <path
            fill="#34A853"
            d="M23 26.5c1.9 0 3.6-.6 5-1.6l-5-4.1-5 
            4.1c1.4 1 3.1 1.6 5 1.6z"
          />
          <path
            fill="#FBBC05"
            d="M17.9 22.9l-5-4.1c-1.1 2.2-1.1 
            4.8 0 7l5-4.1z"
          />
          <path
            fill="#EA4335"
            d="M23 16.5c1.3 0 2.5.5 
            3.4 1.4l4.9-4.9C29.1 11 26.4 9.5 23 
            9.5c-3.4 0-6.1 1.5-8.3 3.9l4.9 
            4.9c.9-1 2.1-1.9 3.4-1.9z"
          />
        </svg>
      </div>
    );
  } else {
    return (
      <div aria-label="Local" style={style}>
        <svg
          width={size}
          height={size}
          viewBox="0 0 24 24"
          fill="none"
          stroke="#6366f1"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <circle cx="12" cy="8" r="4" />
          <path d="M6 20c0-3.3137 2.6863-6 6-6s6 2.6863 6 6" />
        </svg>
      </div>
    );
  }
}
// src/components/admin/SearchBar.jsx
import { useState, useEffect, useCallback } from "react";

export default function SearchBar({ value = "", onChange, placeholder = "Search usersâ€¦" }) {
  const [internal, setInternal] = useState(value);

  // keep in sync if parent resets value
  useEffect(() => {
    setInternal(value);
  }, [value]);

  // debounce updates to parent
  const emit = useCallback(() => {
    onChange && onChange(internal);
  }, [internal, onChange]);

  useEffect(() => {
    const t = setTimeout(emit, 200);
    return () => clearTimeout(t);
  }, [internal, emit]);

  return (
    <div className="searchbar">
      <input
        aria-label="Search users"
        placeholder={placeholder}
        value={internal}
        onChange={(e) => setInternal(e.target.value)}
      />
      {internal && (
        <button
          aria-label="Clear search"
          type="button"
          onClick={() => setInternal("")}
          className="clear-btn"
        >
          Ã—
        </button>
      )}
    </div>
  );
}
import { useState, useEffect, useCallback, useRef } from "react";
import { fetchWithAuth } from "../../utils/auth.js";
import { BRAND } from "../../config.js";

const emailRegex = /^\S+@\S+\.\S+$/;
const roles = ["USER", "ADMIN", "BRAND_SELLER"];
const providers = ["LOCAL", "GOOGLE", "GITHUB"];

const DEFAULT_INITIAL = {
  name: "",
  email: "",
  password: "",
  provider: "LOCAL",
  providerId: "",
  role: "USER",
  emailVerified: false,
  brandId: "",
  brand: null,
};

function validate({ name, email, password, provider, providerId, role }, isNew) {
  const errors = {};
  if (!name || !name.trim()) errors.name = "Name is required";
  else if (name.trim().length < 2) errors.name = "Name must be at least 2 characters";

  if (!email || !email.trim()) errors.email = "Email is required";
  else if (!emailRegex.test(email.trim())) errors.email = "Invalid email";

  if (provider === "LOCAL") {
    if (isNew) {
      if (!password) errors.password = "Password is required";
      else if (password.length < 8) errors.password = "Password must be >=8 chars";
    } else if (password && password.length < 8) {
      errors.password = "Password must be >=8 chars";
    }
  } else {
    if (!providerId || !providerId.trim()) {
      errors.providerId = "Provider ID required for OAuth user";
    }
  }

  return errors;
}

export default function UserForm({
  initial,
  isNew = true,
  onCancel,
  onSubmit,
  submitting,
}) {
  const effectiveInitial = initial ?? DEFAULT_INITIAL;
  const [form, setForm] = useState(() => ({
    ...DEFAULT_INITIAL,
    ...effectiveInitial,
    brandId: effectiveInitial.brand?.id ?? effectiveInitial.brandId ?? "",
    brand: effectiveInitial.brand ?? null,
  }));
  const [errors, setErrors] = useState({});

  // brand search state
  const [brandQuery, setBrandQuery] = useState("");
  const [brandSuggestions, setBrandSuggestions] = useState([]);
  const [brandLoading, setBrandLoading] = useState(false);
  const debounceRef = useRef(null);

  // reset when initial changes
  useEffect(() => {
    setForm({
      ...DEFAULT_INITIAL,
      ...effectiveInitial,
      brandId: effectiveInitial.brand?.id ?? effectiveInitial.brandId ?? "",
      brand: effectiveInitial.brand ?? null,
    });
    setErrors({});
    setBrandQuery("");
    setBrandSuggestions([]);
  }, [
    effectiveInitial.name,
    effectiveInitial.email,
    effectiveInitial.provider,
    effectiveInitial.providerId,
    effectiveInitial.role,
    effectiveInitial.emailVerified,
    effectiveInitial.brandId,
    effectiveInitial.brand,
  ]);

  // brand search effect (only when role is BRAND_SELLER)
  useEffect(() => {
    if (form.role !== "BRAND_SELLER") return;
    if (!brandQuery || brandQuery.trim() === "") {
      setBrandSuggestions([]);
      return;
    }
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      setBrandLoading(true);
      try {
        const res = await fetchWithAuth(`${BRAND.LIST}?q=${encodeURIComponent(brandQuery)}`);
        if (res.ok) {
          const list = await res.json();
          setBrandSuggestions(list.slice(0, 10));
        } else {
          setBrandSuggestions([]);
        }
      } catch (e) {
        setBrandSuggestions([]);
      } finally {
        setBrandLoading(false);
      }
    }, 300);
  }, [brandQuery, form.role]);

  const selectBrand = (b) => {
    setForm((f) => ({ ...f, brandId: b.id, brand: b }));
    setBrandSuggestions([]);
    setBrandQuery("");
  };

  const clearBrand = () => {
    setForm((f) => ({ ...f, brandId: "", brand: null }));
    setBrandQuery("");
    setBrandSuggestions([]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validation = validate(form, isNew);
    if (Object.keys(validation).length) {
      setErrors(validation);
      return;
    }
    // normalize payload: include brandId when appropriate
    await onSubmit({
      name: form.name.trim(),
      email: form.email.trim().toLowerCase(),
      provider: form.provider,
      providerId: form.provider === "LOCAL" ? null : form.providerId,
      password: form.provider === "LOCAL" ? form.password : null,
      role: form.role,
      emailVerified: form.emailVerified,
      brandId: form.role === "BRAND_SELLER" ? form.brandId || null : undefined,
    });
  };

  return (
    <form className="user-form" onSubmit={handleSubmit} noValidate>
      <div className="form-grid">
        <div className="field">
          <label>Name</label>
          <input
            value={form.name}
            onChange={(e) => setForm((f) => ({ ...f, name: e.target.value }))}
            disabled={submitting}
          />
          {errors.name && <div className="field-error">{errors.name}</div>}
        </div>

        <div className="field">
          <label>Email</label>
          <input
            value={form.email}
            onChange={(e) => setForm((f) => ({ ...f, email: e.target.value }))}
            disabled={submitting}
          />
          {errors.email && <div className="field-error">{errors.email}</div>}
        </div>

        <div className="field">
          <label>Provider</label>
          <select
            value={form.provider}
            onChange={(e) =>
              setForm((f) => ({
                ...f,
                provider: e.target.value,
                password: "",
                providerId: "",
              }))
            }
            disabled={submitting}
          >
            {providers.map((p) => (
              <option key={p} value={p}>
                {p}
              </option>
            ))}
          </select>
        </div>

        {form.provider === "LOCAL" && (
          <div className="field">
            <label>{isNew ? "Password" : "New Password (optional)"}</label>
            <input
              type="password"
              value={form.password}
              onChange={(e) => setForm((f) => ({ ...f, password: e.target.value }))}
              disabled={submitting}
            />
            {errors.password && <div className="field-error">{errors.password}</div>}
          </div>
        )}

        {form.provider !== "LOCAL" && (
          <div className="field">
            <label>Provider ID</label>
            <input
              value={form.providerId}
              onChange={(e) => setForm((f) => ({ ...f, providerId: e.target.value }))}
              disabled={submitting}
            />
            {errors.providerId && <div className="field-error">{errors.providerId}</div>}
          </div>
        )}

        <div className="field">
          <label>Role</label>
          <select
            value={form.role}
            onChange={(e) => setForm((f) => ({ ...f, role: e.target.value }))}
            disabled={submitting}
          >
            {roles.map((r) => (
              <option key={r} value={r}>
                {r.replace("_", " ")}
              </option>
            ))}
          </select>
        </div>

        {form.role === "BRAND_SELLER" && (
          <div className="field">
            <label>Brand (optional)</label>
            <div className="brand-autocomplete">
              {form.brand ? (
                <div className="selected-brand">
                  <span>{form.brand.name}</span>
                  <button
                    type="button"
                    onClick={clearBrand}
                    disabled={submitting}
                    aria-label="Clear"
                  >
                    Ã—
                  </button>
                </div>
              ) : (
                <>
                  <input
                    placeholder="Search brands..."
                    value={brandQuery}
                    onChange={(e) => setBrandQuery(e.target.value)}
                    disabled={submitting}
                    autoComplete="off"
                  />
                  {brandLoading && <div className="loader-inline">â€¦</div>}
                  {brandSuggestions.length > 0 && (
                    <ul className="suggestions">
                      {brandSuggestions.map((b) => (
                        <li
                          key={b.id}
                          onClick={() => selectBrand(b)}
                          style={{ cursor: "pointer" }}
                        >
                          {b.name} ({b.slug})
                        </li>
                      ))}
                    </ul>
                  )}
                  <div className="note" style={{ fontSize: "0.75rem", marginTop: 4 }}>
                    You can also paste a brand ID manually.
                  </div>
                  <input
                    type="hidden"
                    value={form.brandId || ""}
                    readOnly
                  />
                </>
              )}
            </div>
            {!form.brand && (
              <div className="manual-brand-input" style={{ marginTop: 4 }}>
                <input
                  placeholder="Or paste brand ID"
                  value={form.brandId}
                  onChange={(e) => setForm((f) => ({ ...f, brandId: e.target.value }))}
                  disabled={submitting}
                />
              </div>
            )}
          </div>
        )}

        <div className="field email-verified">
          <label>Email Verified</label>
          <div className="checkbox-wrap">
            <input
              type="checkbox"
              checked={form.emailVerified}
              onChange={(e) => setForm((f) => ({ ...f, emailVerified: e.target.checked }))}
              disabled={submitting}
            />
            <span>{form.emailVerified ? "Yes" : "No"}</span>
          </div>
        </div>
      </div>

      <div className="form-actions">
        <button type="submit" className="btn btn-primary" disabled={submitting}>
          {isNew ? (submitting ? "Creating..." : "Create user") : submitting ? "Saving..." : "Save"}
        </button>
        {onCancel && (
          <button type="button" className="btn btn-secondary" onClick={onCancel} disabled={submitting}>
            Cancel
          </button>
        )}
      </div>
    </form>
  );
}
import { useState, useEffect, useRef, useCallback } from "react";
import Avatar from "../Avatar.jsx";
import ProviderIcon from "./ProviderIcon.jsx";
import { fetchWithAuth } from "../../utils/auth.js";
import { BRAND } from "../../config.js";

/**
 * Modal used for assigning / searching brands.
 */
function BrandAssignModal({ open, initialBrand, onClose, onAssign, onClear }) {
  const [query, setQuery] = useState("");
  const [suggestions, setSuggestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const debounceRef = useRef(null);
  const containerRef = useRef(null);

  const fetchBrands = useCallback(
    async (q) => {
      setLoading(true);
      try {
        const url = BRAND.LIST(q);
        const res = await fetchWithAuth(url);
        if (res.ok) {
          const list = await res.json();
          setSuggestions(list.slice(0, 10));
        } else {
          setSuggestions([]);
        }
      } catch {
        setSuggestions([]);
      } finally {
        setLoading(false);
      }
    },
    []
  );

  useEffect(() => {
    if (!open) return;
    clearTimeout(debounceRef.current);
    const delay = query.trim() ? 250 : 0;
    debounceRef.current = setTimeout(() => {
      fetchBrands(query);
    }, delay);
    return () => clearTimeout(debounceRef.current);
  }, [query, open, fetchBrands]);

  useEffect(() => {
    if (open) {
      setQuery("");
      setSuggestions([]);
    }
  }, [open]);

  useEffect(() => {
    if (!open) return;
    const onKey = (e) => {
      if (e.key === "Escape") onClose();
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [open, onClose]);

  useEffect(() => {
    if (!open) return;
    const handleClickOutside = (e) => {
      if (containerRef.current && !containerRef.current.contains(e.target)) {
        onClose();
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [open, onClose]);

  if (!open) return null;

  return (
    <div className="modal-backdrop" style={backdropStyle}>
      <div className="brand-modal" style={modalStyle} ref={containerRef}>
        <div className="header" style={headerStyle}>
          <div>
            <h3 style={{ margin: 0 }}>Assign Brand</h3>
            <div style={{ fontSize: 12, color: "#666" }}>
              {initialBrand ? `Current: ${initialBrand.name}` : "No brand assigned"}
            </div>
          </div>
          <button onClick={onClose} aria-label="Close" className="btn btn-outline" style={closeButtonStyle}>
            Ã—
          </button>
        </div>
        <div className="body" style={bodyStyle}>
          <div style={{ marginBottom: 12 }}>
            <label style={{ display: "block", marginBottom: 6 }}>Search brands</label>
            <input
              placeholder="Type to search..."
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              className="small-input"
              autoFocus
              style={{ width: "100%", padding: "8px", boxSizing: "border-box" }}
            />
          </div>

          {loading && <div className="mini">Searching...</div>}
          {!loading && suggestions.length === 0 && query.trim() && <div className="mini">No results</div>}

          {!loading && suggestions.length > 0 && (
            <ul
              className="suggestion-list"
              style={{
                listStyle: "none",
                padding: 0,
                margin: 0,
                maxHeight: 280,
                overflowY: "auto",
                border: "1px solid #e1e4e8",
                borderRadius: 6,
              }}
            >
              {suggestions.map((b) => (
                <li
                  key={b.id}
                  onClick={() => onAssign(b)}
                  style={{
                    padding: "8px 12px",
                    cursor: "pointer",
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    borderBottom: "1px solid #f0f0f0",
                  }}
                >
                  <div style={{ overflow: "hidden" }}>
                    <div
                      style={{
                        fontWeight: 600,
                        whiteSpace: "nowrap",
                        overflow: "hidden",
                        textOverflow: "ellipsis",
                      }}
                    >
                      {b.name}
                    </div>
                    <div style={{ fontSize: 12, color: "#555" }}>{b.slug}</div>
                  </div>
                  <div>
                    <button className="btn btn-sm btn-secondary" style={{ fontSize: 12 }} type="button">
                      Select
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
        <div className="footer" style={footerStyle}>
          <div style={{ display: "flex", gap: 8, flex: 1 }}>
            {initialBrand && (
              <button type="button" className="btn btn-outline" onClick={onClear}>
                Clear assignment
              </button>
            )}
          </div>
          <div style={{ display: "flex", gap: 8 }}>
            <button type="button" className="btn btn-primary" onClick={onClose}>
              Done
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// inline styles
const backdropStyle = {
  position: "fixed",
  inset: 0,
  background: "rgba(0,0,0,0.35)",
  zIndex: 1000,
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  padding: "16px",
};
const modalStyle = {
  background: "#fff",
  borderRadius: 12,
  width: 560,
  maxWidth: "100%",
  boxShadow: "0 25px 60px -10px rgba(0,0,0,0.25)",
  display: "flex",
  flexDirection: "column",
  overflow: "hidden",
};
const headerStyle = {
  padding: "16px 20px",
  borderBottom: "1px solid #eee",
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
};
const closeButtonStyle = {
  padding: "6px 12px",
  fontSize: 20,
  background: "none",
  border: "none",
  cursor: "pointer",
  lineHeight: 1,
};
const bodyStyle = {
  padding: "16px 20px",
  flex: 1,
  overflowY: "auto",
};
const footerStyle = {
  padding: "12px 20px",
  borderTop: "1px solid #eee",
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
};

export default function UserRow({ user, isSelf = false, onUpdated, onDeleted, onChangePassword }) {
  const [editing, setEditing] = useState(false);
  const [form, setForm] = useState({
    name: user.name,
    email: user.email,
    role: user.role,
    emailVerified: user.emailVerified,
    password: "",
  });
  const [errors, setErrors] = useState({});
  const [saving, setSaving] = useState(false);
  const [assignModalOpen, setAssignModalOpen] = useState(false);
  const [selectedBrand, setSelectedBrand] = useState(user.brand || null);
  const [assigningBrand, setAssigningBrand] = useState(false);
  const [clearingBrand, setClearingBrand] = useState(false);

  const isLocal = user.provider === "LOCAL";
  const isBrandSeller = user.role === "BRAND_SELLER";

  useEffect(() => {
    setForm({
      name: user.name,
      email: user.email,
      role: user.role,
      emailVerified: user.emailVerified,
      password: "",
    });
    setSelectedBrand(user.brand || null);
    setEditing(false);
    setErrors({});
  }, [user]);

  const handleSave = async () => {
    setErrors({});
    const payload = {};
    if (form.name.trim() !== user.name) payload.name = form.name.trim();
    if (form.email.trim().toLowerCase() !== user.email) payload.email = form.email.trim().toLowerCase();
    if (!isSelf && form.role && form.role !== user.role) payload.role = form.role;
    if (typeof form.emailVerified === "boolean" && form.emailVerified !== user.emailVerified)
      payload.emailVerified = form.emailVerified;
    if (isLocal && form.password && !isSelf) payload.password = form.password;

    if (Object.keys(payload).length === 0) {
      setEditing(false);
      return;
    }

    setSaving(true);
    try {
      const res = await fetchWithAuth(`/admin/users/${user.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const body = await res.json().catch(() => ({}));
      if (!res.ok) {
        if (body.error && body.error.toLowerCase().includes("email already in use")) {
          setErrors({ email: "Email already in use" });
        } else {
          alert("Update failed: " + (body.error || res.status));
        }
        return;
      }
      onUpdated();
      setEditing(false);
      setForm((f) => ({ ...f, password: "" }));
    } catch (e) {
      alert("Update error: " + e.message);
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = () => {
    if (window.confirm("Delete this user?")) {
      onDeleted(user.id);
    }
  };

  const assignBrand = async (brand) => {
    if (!brand || !brand.id) return;
    setAssigningBrand(true);
    try {
      const res = await fetchWithAuth(
        `${BRAND.BASE}/brands/${brand.id}/assign-seller/${user.id}`,
        { method: "POST" }
      );
      if (!res.ok) {
        if (res.status === 404) {
          alert("Failed to assign brand: user not yet synced or brand not found. Try again in a few seconds.");
        } else {
          const body = await res.json().catch(() => ({}));
          alert("Failed to assign brand: " + (body.error || res.status));
        }
        return;
      }
      setSelectedBrand(brand);
      setAssignModalOpen(false);
      onUpdated();
    } catch (e) {
      alert("Assign brand error: " + e.message);
    } finally {
      setAssigningBrand(false);
    }
  };

  const clearBrand = async () => {
    if (!selectedBrand) return;
    setClearingBrand(true);
    try {
      const res = await fetchWithAuth(
        `${BRAND.BASE}/brands/${selectedBrand.id}/assign-seller/${user.id}`,
        { method: "DELETE" }
      );
      if (!res.ok) {
        const body = await res.json().catch(() => ({}));
        alert("Failed to clear brand: " + (body.error || res.status));
        return;
      }
      setSelectedBrand(null);
      setAssignModalOpen(false);
      onUpdated();
    } catch (e) {
      alert("Clear brand error: " + e.message);
    } finally {
      setClearingBrand(false);
    }
  };

  return (
    <>
      {isBrandSeller && (
        <BrandAssignModal
          open={assignModalOpen}
          initialBrand={selectedBrand}
          onClose={() => setAssignModalOpen(false)}
          onAssign={assignBrand}
          onClear={clearBrand}
        />
      )}

      <tr className="user-row">
        <td>
          <Avatar imageUrl={user.imageUrl} size={32} alt={user.name} />
        </td>
        <td>{user.id}</td>
        <td>
          {editing ? (
            <div className="inline-field">
              <input
                value={form.name}
                onChange={(e) => setForm((f) => ({ ...f, name: e.target.value }))}
                disabled={saving}
              />
              {errors.name && <div className="field-error">{errors.name}</div>}
            </div>
          ) : (
            user.name
          )}
        </td>
        <td>
          {editing ? (
            <div className="inline-field">
              <input
                value={form.email}
                onChange={(e) => setForm((f) => ({ ...f, email: e.target.value }))}
                disabled={saving || isSelf}
              />
              {errors.email && <div className="field-error">{errors.email}</div>}
            </div>
          ) : (
            user.email
          )}
        </td>
        <td className="provider-cell">
          <ProviderIcon provider={user.provider} />
          <span>{user.provider}</span>
        </td>
        <td>
          {editing ? (
            <select
              value={form.role}
              onChange={(e) => setForm((f) => ({ ...f, role: e.target.value }))}
              disabled={saving || isSelf}
              className="small-input"
            >
              <option value="USER">USER</option>
              <option value="ADMIN">ADMIN</option>
              <option value="BRAND_SELLER">BRAND_SELLER</option>
            </select>
          ) : (
            user.role
          )}
        </td>
        <td>
          {editing ? (
            <label className="checkbox-wrap">
              <input
                type="checkbox"
                checked={form.emailVerified}
                onChange={(e) => setForm((f) => ({ ...f, emailVerified: e.target.checked }))}
                disabled={saving}
              />
              <span>{form.emailVerified ? "Yes" : "No"}</span>
            </label>
          ) : user.emailVerified ? (
            "Yes"
          ) : (
            "No"
          )}
        </td>
        <td>{user.createdAt ? new Date(user.createdAt).toLocaleString() : "-"}</td>
        <td>{user.updatedAt ? new Date(user.updatedAt).toLocaleString() : "-"}</td>
        <td className="actions-cell">
          {/* Brand label up top (only for brand sellers), then single row of action buttons below */}
          <div style={{ display: "flex", flexDirection: "column", gap: 4, minWidth: 180 }}>
            {isBrandSeller && (
              <div style={{ fontSize: 12 }}>
                <strong>Brand:</strong>{" "}
                {selectedBrand ? (
                  <span
                    style={{
                      display: "inline-flex",
                      alignItems: "center",
                      padding: "3px 10px",
                      background: "#eef7fd",
                      borderRadius: 999,
                      gap: 6,
                      fontSize: 12,
                      maxWidth: 180,
                      whiteSpace: "nowrap",
                      overflow: "hidden",
                      textOverflow: "ellipsis",
                    }}
                    title={selectedBrand.name}
                  >
                    <span style={{ overflow: "hidden", textOverflow: "ellipsis" }}>
                      {selectedBrand.name}
                    </span>
                    <button
                      onClick={clearBrand}
                      aria-label="Clear brand"
                      disabled={clearingBrand}
                      style={{
                        background: "none",
                        border: "none",
                        cursor: "pointer",
                        fontSize: 14,
                        lineHeight: 1,
                        padding: 0,
                      }}
                    >
                      Ã—
                    </button>
                  </span>
                ) : (
                  <span style={{ fontStyle: "italic", color: "#666" }}>None assigned</span>
                )}
              </div>
            )}

            <div
              style={{
                display: "flex",
                gap: 6,
                flexWrap: "nowrap",
                alignItems: "center",
                marginTop: 2,
                overflowX: "auto",
              }}
            >
              {editing ? (
                <>
                  {isLocal && !isSelf && (
                    <input
                      type="password"
                      placeholder="New password"
                      value={form.password}
                      onChange={(e) => setForm((f) => ({ ...f, password: e.target.value }))}
                      disabled={saving}
                      className="small-input"
                      style={{ width: 100, flex: "0 0 auto" }}
                    />
                  )}
                  {isSelf && isLocal && onChangePassword && (
                    <button
                      type="button"
                      className="btn btn-outline"
                      onClick={() => onChangePassword(user)}
                      disabled={saving}
                      style={{ flex: "0 0 auto" }}
                    >
                      Change Password
                    </button>
                  )}
                  {isBrandSeller && (
                    <button
                      type="button"
                      className="btn btn-secondary"
                      onClick={() => setAssignModalOpen(true)}
                      disabled={assigningBrand}
                      style={{ flex: "0 0 auto" }}
                    >
                      {selectedBrand ? "Change Brand" : "Assign Brand"}
                    </button>
                  )}
                  <button
                    onClick={handleSave}
                    className="btn btn-primary"
                    disabled={saving}
                    style={{ flex: "0 0 auto" }}
                  >
                    {saving ? "Saving..." : "Save"}
                  </button>
                  <button
                    onClick={() => {
                      setEditing(false);
                      setErrors({});
                      setForm({
                        name: user.name,
                        email: user.email,
                        role: user.role,
                        emailVerified: user.emailVerified,
                        password: "",
                      });
                    }}
                    className="btn btn-outline"
                    disabled={saving}
                    style={{ flex: "0 0 auto" }}
                  >
                    Cancel
                  </button>
                </>
              ) : (
                <>
                  <button
                    onClick={() => setEditing(true)}
                    className="btn btn-primary"
                    disabled={saving}
                    style={{ flex: "0 0 auto" }}
                  >
                    Edit
                  </button>
                  {isBrandSeller && (
                    <button
                      type="button"
                      className="btn btn-secondary"
                      onClick={() => setAssignModalOpen(true)}
                      disabled={assigningBrand}
                      style={{ flex: "0 0 auto" }}
                    >
                      {selectedBrand ? "Change Brand" : "Assign Brand"}
                    </button>
                  )}
                  {!isSelf && (
                    <button
                      onClick={handleDelete}
                      className="btn btn-danger"
                      disabled={saving}
                      style={{ flex: "0 0 auto" }}
                    >
                      Delete
                    </button>
                  )}
                </>
              )}
            </div>
          </div>
        </td>
      </tr>
    </>
  );
}
body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
  background: #f5f7fa;
  margin: 0;
}
.page {
  max-width: 720px;
  margin: 40px auto;
  padding: 16px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 8px 24px -4px rgba(0, 0, 0, 0.08);
}
button {
  cursor: pointer;
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  background: #2563eb;
  color: #fff;
}
input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 100%;
}
.error {
  background: #ffe6e6;
  color: #a33;
  padding: 8px;
  border-radius: 4px;
}
/* src/css/admin-users.css */
:root {
  --btn-height: 34px;
  --input-height: 34px;
  --border-radius: 6px;
  --gap: 12px;
  --action-min-width: 260px;
  --modal-width: 420px;
  --font-size-base: 14px;
}

/* Table / row */
.user-row td {
  vertical-align: middle;
  padding: 10px 14px;
  font-size: var(--font-size-base);
}
.user-row .actions-cell {
  min-width: var(--action-min-width);
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  align-items: center;
  row-gap: 4px;
}

/* Buttons */
.btn {
  height: var(--btn-height);
  padding: 0 14px;
  border-radius: var(--border-radius);
  font-size: 13px;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  gap: 4px;
  border: none;
  line-height: 1;
  white-space: nowrap;
}
.btn-sm {
  padding: 0 12px;
  font-size: 12px;
}
.btn-edit { background: #2563eb; color: white; }
.btn-save { background: #16a34a; color: white; }
.btn-danger { background: #dc2626; color: white; }
.btn-secondary { background: #f3f4f6; border: 1px solid #d1d5db; color: #1f2937; }
.btn-outline { background: transparent; border: 1px solid #2563eb; color: #2563eb; }

/* Inputs */
.small-input,
.inline-field input,
.user-form input,
.user-form select {
  height: var(--input-height);
  padding: 6px 10px;
  font-size: var(--font-size-base);
  border: 1px solid #cbd5e1;
  border-radius: var(--border-radius);
  outline: none;
  box-sizing: border-box;
}

/* Inline editing */
.inline-field {
  display: flex;
  flex-direction: column;
  gap: 4px;
}
.field-error {
  margin-top: 2px;
  font-size: 12px;
  color: #b91c1c;
}

/* Brand pill */
.brand-pill {
  display: inline-flex;
  align-items: center;
  background: #eef2f7;
  border-radius: 999px;
  padding: 4px 10px;
  font-size: 12px;
  gap: 6px;
}
.brand-pill button {
  background: transparent;
  border: none;
  cursor: pointer;
  font-size: 14px;
  line-height: 1;
  padding: 0;
}

/* Modal */
.modal-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.25);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px;
  z-index: 1000;
}
.brand-modal {
  width: var(--modal-width);
  max-width: 100%;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  font-size: var(--font-size-base);
}
.brand-modal .header,
.brand-modal .footer {
  padding: 12px 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ececec;
}
.brand-modal .footer {
  border-top: 1px solid #ececec;
  border-bottom: none;
}
.brand-modal .body {
  padding: 12px 16px;
  flex: 1;
  overflow-y: auto;
}
.suggestion-list {
  list-style: none;
  margin: 8px 0 0;
  padding: 0;
  max-height: 220px;
  overflow-y: auto;
  border: 1px solid #d1d5e0;
  border-radius: 6px;
}
.suggestion-list li {
  padding: 10px 12px;
  cursor: pointer;
  border-bottom: 1px solid #f0f4fa;
}
.suggestion-list li:last-child {
  border-bottom: none;
}
.suggestion-list li:hover {
  background: #f5f7fb;
}

/* Responsive tweaks */
@media (max-width: 1600px) {
  .user-row .actions-cell {
    min-width: 220px;
  }
}

.admin-page {
  max-width: 1200px;
  margin: 40px auto;
  padding: 0 16px 60px;
  color: var(--text);
}

.admin-header {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 16px;
  align-items: center;
  margin-bottom: 16px;
}

.subtitle {
  font-size: 0.9rem;
  color: var(--muted);
  margin-top: 4px;
}

.admin-actions {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.card {
  background: var(--card-bg);
  border-radius: var(--radius);
  padding: 16px;
  box-shadow: var(--shadow);
  margin-bottom: 16px;
}

.new-user-card {
  margin-top: 8px;
}

.error-box {
  background: #ffe3e3;
  padding: 12px 16px;
  border-radius: 6px;
  color: #862d2d;
  margin-bottom: 12px;
}

.table-wrapper {
  background: transparent;
  overflow-x: auto;
}

.users-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 14px;
  min-width: 1000px;
}

.users-table th,
.users-table td {
  padding: 10px 12px;
  text-align: left;
  vertical-align: top;
  border-bottom: 1px solid var(--border);
}

.users-table th {
  background: #f5f7fa;
  font-weight: 600;
}

.users-table .empty {
  text-align: center;
  padding: 24px;
  color: var(--muted);
}

.btn {
  cursor: pointer;
  padding: 10px 14px;
  border-radius: 6px;
  border: none;
  font-weight: 600;
  font-size: 0.9rem;
  display: inline-flex;
  align-items: center;
  gap: 6px;
  transition: filter .2s ease;
}

.btn-primary {
  background: var(--accent);
  color: #fff;
}

.btn-secondary {
  background: transparent;
  border: 1px solid var(--accent);
  color: var(--accent);
}

.btn-edit {
  background: var(--accent);
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 12px;
}

.btn-save {
  background: #10b981;
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 12px;
}

.btn-cancel {
  background: #6b7280;
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 12px;
}

.btn-danger {
  background: #e53e3e;
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 12px;
}

.loading {
  padding: 16px;
}

.user-form {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 16px;
}

.field {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.field input,
.field select {
  padding: 8px;
  border-radius: 6px;
  border: 1px solid #ccc;
  font-size: 0.9rem;
}

.field-error {
  font-size: 11px;
  color: #b91c1c;
  margin-top: 2px;
}

.checkbox-wrap {
  display: inline-flex;
  align-items: center;
  gap: 6px;
}

.form-actions {
  margin-top: 8px;
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.inline-field {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.actions-cell {
  white-space: nowrap;
  display: flex;
  gap: 6px;
  align-items: center;
}

.small-input {
  padding: 4px 6px;
  border-radius: 4px;
  border: 1px solid #ccc;
  font-size: 12px;
}
/* search bar */
.searchbar {
  position: relative;
  display: inline-flex;
  align-items: center;
  margin-right: 8px;
}

.searchbar input {
  padding: 8px 12px;
  border-radius: 8px;
  border: 1px solid #d1d9e6;
  font-size: 0.95rem;
  min-width: 220px;
  outline: none;
  transition: box-shadow .2s ease;
}

.searchbar input:focus {
  box-shadow: 0 0 0 3px rgba(99,102,241,0.4);
  border-color: #6366f1;
}

.searchbar .clear-btn {
  position: absolute;
  right: 6px;
  background: transparent;
  border: none;
  cursor: pointer;
  font-size: 16px;
  line-height: 1;
  padding: 0;
  color: #6b7c93;
}

.no-results {
  margin: 12px 0;
  color: #6b7c93;
  font-size: 0.95rem;
}
:root {
  --bg: #f7f8fa;
  --panel: #ffffff;
  --panel-2: #f9fafb;
  --text: #1a1c1f;
  --muted: #5c6675;
  --border: #dce0e6;
  --accent: #1976d2;
  --ok: #2e7d32;
  --warn: #ed6c02;
  --danger: #d32f2f;
  --shadow: 0 4px 12px rgba(0,0,0,.08);
}

body {
  background: var(--bg);
  color: var(--text);
}

/* Wrapper */
.brand-requests {
  max-width: 1080px;
  margin: 24px auto;
  padding: 0 16px 48px;
}

/* Header */
.br-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  margin-bottom: 16px;
}

.br-header h1 {
  font-size: 1.5rem;
  margin: 0;
  font-weight: 700;
}

.br-controls {
  display: flex;
  align-items: center;
  gap: 12px;
  flex-wrap: wrap;
}

.br-select {
  display: flex;
  align-items: center;
  gap: 8px;
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 8px;
  padding: 6px 10px;
}

.br-select span {
  color: var(--muted);
  font-size: .9rem;
}

.br-select select {
  background: transparent;
  color: var(--text);
  border: none;
  outline: none;
  font: inherit;
  padding: 4px 6px;
  cursor: pointer;
}

.br-note {
  color: var(--ok);
  font-weight: 600;
}

/* Alerts */
.alert {
  padding: 12px 14px;
  border-radius: 8px;
  border: 1px solid var(--border);
  background: var(--panel);
  box-shadow: var(--shadow);
  margin: 10px 0 16px;
}

.alert.error {
  border-color: var(--danger);
  background: #fdecea;
  color: var(--danger);
}

/* Table */
.table-wrap {
  overflow-x: auto;
  border: 1px solid var(--border);
  border-radius: 8px;
  background: var(--panel);
  box-shadow: var(--shadow);
}

.br-table {
  width: 100%;
  border-collapse: collapse;
  min-width: 760px;
}

.br-table thead th {
  text-align: left;
  font-weight: 700;
  font-size: .9rem;
  color: var(--muted);
  padding: 12px 14px;
  background: var(--panel-2);
}

.br-table tbody td {
  padding: 12px 14px;
  border-top: 1px solid var(--border);
  vertical-align: middle;
}

.br-empty {
  text-align: center;
  color: var(--muted);
  padding: 24px !important;
}

/* Logo cell */
.logo-cell {
  display: grid;
  grid-template-columns: 56px 1fr;
  gap: 10px;
  align-items: center;
}

.logo-box {
  width: 48px;
  height: 48px;
  border: 1px solid var(--border);
  border-radius: 8px;
  background: var(--panel-2);
  display: grid;
  place-items: center;
  overflow: hidden;
}

.logo-box img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.logo-actions {
  display: flex;
  gap: 8px;
  align-items: center;
  flex-wrap: wrap;
}

/* File input */
.file-input {
  position: relative;
  overflow: hidden;
  display: inline-grid;
  place-items: center;
  padding: 8px 12px;
  border: 1px dashed var(--border);
  border-radius: 8px;
  background: var(--panel-2);
  color: var(--muted);
  font-size: .9rem;
  cursor: pointer;
}

.file-input:hover {
  border-color: var(--accent);
  color: var(--text);
}

.file-input input[type="file"] {
  position: absolute;
  inset: 0;
  opacity: 0;
  cursor: pointer;
}

/* Buttons - base */
.btn {
  border: 1px solid var(--border);
  background: var(--panel-2);
  color: var(--text);
  padding: 8px 12px;
  border-radius: 8px;
  font: inherit;
  cursor: pointer;
  transition: background .2s ease, border-color .2s ease, color .2s ease;
}

.btn:hover { border-color: var(--accent); }
.btn:disabled { opacity: .55; cursor: not-allowed; }

/* Approve / Reject (harmonized with .btn) */
.btn-ok {
  border: 1px solid var(--ok);
  background: #e6f4ea;
  color: var(--ok);
  padding: 8px 12px;
  border-radius: 8px;
  font: inherit;
  cursor: pointer;
  transition: background .2s ease, border-color .2s ease, color .2s ease;
}
.btn-ok:hover {
  background: #d4edda;
  border-color: #1e5d26;
}

.btn-danger {
  border: 1px solid var(--danger);
  background: #fdecea;
  color: var(--danger);
  padding: 8px 12px;
  border-radius: 8px;
  font: inherit;
  cursor: pointer;
  transition: background .2s ease, border-color .2s ease, color .2s ease;
}
.btn-danger:hover {
  background: #f9d6d5;
  border-color: #9c1f1f;
}

/* Status badges */
.badge {
  display: inline-block;
  padding: 3px 10px;
  border-radius: 999px;
  font-size: .8rem;
  font-weight: 600;
  border: 1px solid var(--border);
}

.badge-ok {
  color: var(--ok);
  background: #e6f4ea;
}

.badge-warn {
  color: var(--warn);
  background: #fff4e5;
}

.badge-danger {
  color: var(--danger);
  background: #fdecea;
}

/* Monospace pill for slug */
.code {
  background: var(--panel-2);
  border: 1px solid var(--border);
  padding: 2px 8px;
  border-radius: 6px;
  font-size: .85rem;
}

/* Actions cell */
.actions {
  display: flex;
  gap: 8px;
  align-items: center;
}
:root{
  --bg:#f7f8fa;
  --panel:#fff;
  --panel-2:#f9fafb;
  --text:#1a1c1f;
  --muted:#5c6675;
  --border:#dce0e6;
  --accent:#1976d2;
  --ok:#2e7d32;
  --warn:#ed6c02;
  --danger:#d32f2f;
  --shadow:0 4px 12px rgba(0,0,0,.08);

  --radius:8px;
  --input-h:36px;
  --gap:12px;
  --font:14px;
}

/* Page wrapper */
.brp {
  max-width: 720px;
  margin: 32px auto 60px;
  padding: 0 16px;
  color: var(--text);
}

/* Page title */
.brp-title {
  font-size: 1.6rem;
  margin: 0 0 14px;
  font-weight: 700;
}

/* Card */
.brp-card {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  padding: 16px;
}

/* Section header row */
.brp-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
}

/* Status badge */
.badge {
  display: inline-block;
  padding: 4px 10px;
  border-radius: 999px;
  font-size: .8rem;
  font-weight: 700;
  border: 1px solid var(--border);
}
.badge-ok { color: var(--ok); background:#e6f4ea; }
.badge-warn { color: var(--warn); background:#fff4e5; }
.badge-danger { color: var(--danger); background:#fdecea; }

/* Key/values */
.brp-meta {
  margin-top: 10px;
  display: grid;
  gap: 6px;
  font-size: var(--font);
}
.code {
  background: var(--panel-2);
  border: 1px solid var(--border);
  padding: 2px 8px;
  border-radius: 6px;
  font-size: .85rem;
}

/* Logo section */
.brp-section-label {
  margin-top: 16px;
  margin-bottom: 8px;
  font-size: 12px;
  color: var(--muted);
  letter-spacing: .02em;
}

.brp-logo-row {
  display: flex;
  align-items: center;
  gap: 16px;
  flex-wrap: wrap;
}

.logo-box {
  width: 96px;
  height: 96px;
  border: 1px solid var(--border);
  border-radius: var(--radius);
  background: #fff;
  display: grid;
  place-items: center;
  overflow: hidden;
}
.logo-box img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

/* File input (pretty) */
.file-input {
  position: relative;
  overflow: hidden;
  display: inline-grid;
  place-items: center;
  padding: 8px 12px;
  border: 1px dashed var(--border);
  border-radius: var(--radius);
  background: var(--panel-2);
  color: var(--muted);
  font-size: .9rem;
  cursor: pointer;
}
.file-input:hover { border-color: var(--accent); color: var(--text); }
.file-input input[type="file"]{
  position:absolute; inset:0; opacity:0; cursor:pointer;
}

/* Buttons */
.btn {
  border: 1px solid var(--border);
  background: var(--panel-2);
  color: var(--text);
  padding: 8px 12px;
  border-radius: var(--radius);
  font: inherit;
  cursor: pointer;
  transition: background .2s ease, border-color .2s ease, color .2s ease;
}
.btn:hover { border-color: var(--accent); }
.btn:disabled { opacity:.55; cursor:not-allowed; }

.btn-primary {
  background: var(--accent);
  color: #fff;
  border-color: var(--accent);
}
.btn-primary:hover { filter: brightness(0.96); }

.btn-ok {
  border: 1px solid var(--ok);
  background: #e6f4ea;
  color: var(--ok);
}
.btn-ok:hover { background:#d4edda; border-color:#1e5d26; }

.btn-danger {
  border: 1px solid var(--danger);
  background: #fdecea;
  color: var(--danger);
}
.btn-danger:hover { background:#f9d6d5; border-color:#9c1f1f; }

/* Alerts */
.alert {
  margin-top: 12px;
  padding: 12px 14px;
  border-radius: var(--radius);
  border: 1px solid var(--border);
  background: var(--panel);
  box-shadow: var(--shadow);
  font-size: var(--font);
}
.alert.ok { color: var(--ok); border-color: var(--ok); background:#e6f4ea; }
.alert.err { color: var(--danger); border-color: var(--danger); background:#fdecea; }

/* Form */
.brp-form {
  margin-top: 14px;
}
.field {
  display: flex;
  flex-direction: column;
  gap: 6px;
  margin-bottom: 10px;
  font-size: var(--font);
}
.field label {
  font-weight: 600;
}
.input, .input-file {
  height: var(--input-h);
  padding: 6px 10px;
  font-size: var(--font);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  outline: none;
  background: #fff;
  box-sizing: border-box;
}
.input:focus { border-color: var(--accent); box-shadow: 0 0 0 3px rgba(25,118,210,.12); }

.brp-actions {
  margin-top: 12px;
  display: flex;
  gap: 10px;
  align-items: center;
  flex-wrap: wrap;
}

/* Helpers */
.muted { color: var(--muted); font-size: .95rem; }
.center { text-align: center; }
/* dashboard.css */
:root {
  --radius: 12px;
  --shadow: 0 24px 60px -10px rgba(0, 0, 0, 0.08);
  --bg: #f0f4f9;
  --card-bg: #ffffff;
  --text: #1f2d3a;
  --muted: #6b7c93;
  --border: #e2e8f0;
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
}

body {
  margin: 0;
  background: var(--bg);
}

.page.dashboard {
  max-width: 960px;
  margin: 48px auto;
  padding: 24px 20px 40px;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.page.dashboard h2 {
  margin: 0;
  font-size: 1.9rem;
  font-weight: 600;
  color: var(--text);
}

.profile-wrapper {
  background: var(--card-bg);
  border-radius: var(--radius);
  padding: 24px 28px;
  box-shadow: var(--shadow);
  display: flex;
  flex-wrap: wrap;
  gap: 32px;
}

.profile {
  flex: 1;
  min-width: 220px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  font-size: 1rem;
}

.profile p {
  margin: 0;
  line-height: 1.4;
}

.profile strong {
  display: inline-block;
  width: 100px;
  color: #333;
}

button {
  cursor: pointer;
  padding: 10px 18px;
  border: none;
  border-radius: 8px;
  background: #6366f1;
  color: #fff;
  font-weight: 600;
  font-size: 0.95rem;
  transition: filter .2s ease;
}

button:hover {
  filter: brightness(1.05);
}

.profile-wrapper > div:first-child {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 14px;
}

.avatar-wrapper {
  position: relative;
}

.profile .info {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

/* Profile image uploader container (if used inside dashboard) */
.profile-wrapper .uploader {
  width: 100%;
}

/* Responsive */
@media (max-width: 850px) {
  .profile-wrapper {
    flex-direction: column;
  }

  .profile strong {
    width: auto;
  }
}
:root {
  --radius: 12px;
  --shadow: 0 24px 60px -10px rgba(0, 0, 0, 0.08);
  --bg: #f0f4f9;
  --card-bg: #ffffff;
  --text: #1f2d3a;
  --muted: #6b7c93;
  --accent: #6366f1;
  --transition: .2s ease;
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
}

body {
  margin: 0;
  background: var(--bg);
  color: var(--text);
}

.page.home {
  max-width: 1100px;
  margin: 0 auto;
  padding: 60px 24px 100px;
  display: flex;
  flex-direction: column;
  gap: 48px;
}

.hero {
  display: flex;
  gap: 48px;
  align-items: center;
  flex-wrap: wrap;
  padding: 24px;
}

.hero-content {
  flex: 1 1 420px;
  min-width: 280px;
}

.hero-title {
  font-size: 2.4rem;
  font-weight: 700;
  margin: 0 0 12px;
  line-height: 1.1;
}

.hero-subtitle {
  margin: 0 0 20px;
  font-size: 1rem;
  color: var(--muted);
  line-height: 1.5;
}

.cta-buttons {
  display: flex;
  gap: 16px;
  flex-wrap: wrap;
  margin-top: 8px;
}

.btn-primary {
  background: var(--accent);
  color: #fff !important;
  padding: 14px 22px;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  font-size: 1rem;
  transition: filter var(--transition);
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 6px;
}

.btn-primary:hover {
  filter: brightness(1.05);
}

.btn-secondary {
  background: transparent;
  color: var(--accent);
  padding: 14px 22px;
  border: 2px solid var(--accent);
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  font-size: 1rem;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 6px;
  transition: background var(--transition), color var(--transition);
}

.btn-secondary:hover {
  background: var(--accent);
  color: #fff;
}

.hero-graphic {
  flex: 1 1 360px;
  min-width: 240px;
  display: flex;
  justify-content: center;
  position: relative;
}

/* Utility */
.small {
  font-size: 0.85rem;
  color: var(--muted);
}

/* Footer-ish link line */
.cta-note {
  margin-top: 8px;
  font-size: 0.9rem;
  color: var(--muted);
}

/* Responsive tweaks */
@media (max-width: 1000px) {
  .hero {
    flex-direction: column-reverse;
    align-items: flex-start;
  }
  .hero-title {
    font-size: 2rem;
  }
}

@media (max-width: 600px) {
  .cta-buttons {
    flex-direction: column;
  }
}
/* login.css */
:root {
  --radius: 10px;
  --shadow: 0 16px 40px -10px rgba(0, 0, 0, 0.08);
  --bg: #f5f7fa;
  --card-bg: #ffffff;
  --transition: 0.2s ease;
  --text: #1f2d3a;
  --muted: #6b7c93;
  --border: #e2e8f0;
  --focus: #6366f1;
  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}

body {
  margin: 0;
  background: var(--bg);
  color: var(--text);
}

.page.login {
  max-width: 420px;
  margin: 64px auto;
  padding: 32px 28px 40px;
  background: var(--card-bg);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.page.login h2 {
  margin: 0 0 8px;
  font-size: 1.75rem;
  font-weight: 600;
  letter-spacing: 0.5px;
}

.login-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.login-form > div {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

label {
  font-size: 0.85rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
  color: var(--muted);
}

input {
  padding: 12px 14px;
  border: 1px solid var(--border);
  border-radius: 8px;
  font-size: 1rem;
  outline: none;
  background: #fff;
  transition: border var(--transition), box-shadow var(--transition);
}

input:focus {
  border-color: var(--focus);
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);
}

button[type="submit"],
button.primary {
  cursor: pointer;
  padding: 12px 18px;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  background: #6366f1;
  color: #fff;
  transition: filter var(--transition), transform var(--transition);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
}

button[type="submit"]:hover {
  filter: brightness(1.05);
}

button[type="submit"]:active {
  transform: translateY(1px);
}

.error {
  background: #ffe3e3;
  color: #862d2d;
  padding: 10px 14px;
  border-radius: 6px;
  font-size: 0.9rem;
  border: 1px solid #f5c2c2;
}

.oauth {
  margin-top: 8px;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.oauth p {
  margin: 0 0 6px;
  font-size: 0.9rem;
  color: var(--muted);
}

.oauth-buttons {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

/* OAuth buttons - brand-accurate */
.oauth-btn {
  position: relative;
  cursor: pointer;
  padding: 0; /* reset, inner container handles padding */
  font-size: 0.95rem;
  font-weight: 500;
  border-radius: 6px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  border: none;
  transition: background 0.2s ease, filter 0.2s ease;
  width: 100%;
  text-decoration: none;
  font-family: "Segoe UI", Roboto, Arial, sans-serif;
  overflow: hidden;
  box-sizing: border-box;
}

/* Google button per Google's branding */
.oauth-btn.google {
  background: #fff;
  color: #3c4043;
  border: 1px solid #dadce0;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.oauth-btn.google:hover {
  background: #f7f8fa;
}

.oauth-btn.google:active {
  background: #f1f3f4;
}

.oauth-btn.google .inner {
  display: flex;
  align-items: center;
  padding: 10px 14px;
  gap: 10px;
  width: 100%;
  justify-content: center;
}

.oauth-btn.google .icon-wrapper {
  background: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px;
  border-radius: 2px;
  flex-shrink: 0;
}

.oauth-btn.google .icon {
  width: 18px;
  height: 18px;
  display: block;
}

/* GitHub button */
.oauth-btn.github {
  background: #24292f;
  color: #fff;
}

.oauth-btn.github:hover {
  background: #2d333b;
}

.oauth-btn.github:active {
  background: #1f2429;
}

.oauth-btn.github .inner {
  display: flex;
  align-items: center;
  padding: 10px 14px;
  gap: 10px;
  width: 100%;
  justify-content: center;
}

.oauth-btn.github .icon {
  width: 18px;
  height: 18px;
  flex-shrink: 0;
  display: block;
}


/* Link text */
.page.login p {
  margin: 12px 0 0;
  font-size: 0.9rem;
  color: var(--muted);
}

.page.login a {
  color: #6366f1;
  text-decoration: none;
}

.page.login a:hover {
  text-decoration: underline;
}

/* Small helper for avatar preview on register */
.page.login img {
  display: block;
}
/* Navbar */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 12px 36px -8px rgba(0,0,0,0.06);
  gap: 16px;
  flex-wrap: wrap;
  margin-bottom: 24px;
}

.logo {
  font-weight: 700;
  font-size: 1.2rem;
  color: var(--accent);
  text-decoration: none;
  margin-right: 16px;
}

.links {
  display: inline-flex;
  gap: 14px;
  flex-wrap: wrap;
}

.links a {
  text-decoration: none;
  color: var(--text);
  font-weight: 600;
  padding: 6px 10px;
  border-radius: 6px;
  transition: background var(--transition);
}

.links a:hover {
  background: rgba(99,102,241,0.08);
}

.nav-right {
  display: flex;
  align-items: center;
  gap: 16px;
}

.auth-links {
  display: flex;
  gap: 12px;
}

.small-link {
  font-size: 0.9rem;
  color: var(--accent);
  text-decoration: none;
  padding: 6px 10px;
  border-radius: 6px;
  border: 1px solid var(--accent);
  transition: background var(--transition), color var(--transition);
}

.small-link:hover {
  background: var(--accent);
  color: #fff;
}

.user-section {
  display: flex;
  align-items: center;
  gap: 12px;
}

.user-info {
  display: flex;
  align-items: center;
  gap: 8px;
}

.user-info .name {
  font-size: 0.9rem;
  font-weight: 600;
  color: var(--text);
}

.btn-logout {
  background: transparent;
  border: 1px solid var(--accent);
  padding: 6px 14px;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  color: var(--accent);
  transition: background var(--transition), color var(--transition);
}

.btn-logout:hover {
  background: var(--accent);
  color: #fff;
}
import { useEffect, useState, useCallback, useMemo } from "react";
import { fetchWithAuth, logout } from "../utils/auth.js";
import { API_BASE, STORE_API_BASE } from "../config.js";
import { useNavigate } from "react-router-dom";
import UserForm from "../components/admin/UserForm.jsx";
import UserRow from "../components/admin/UserRow.jsx";
import SearchBar from "../components/admin/SearchBar.jsx";
import "../css/pages/admin-users.css";

const matchUser = (user, query) => {
  if (!query) return true;
  const q = query.trim().toLowerCase();
  return (
    user.name?.toLowerCase().includes(q) ||
    user.email?.toLowerCase().includes(q) ||
    user.role?.toLowerCase().includes(q) ||
    user.provider?.toLowerCase().includes(q)
  );
};

/**
 * Given raw users from the user management service, fetch brand summary for BRAND_SELLERs.
 * Attaches `brand` property (or null) to each user.
 */
const enrichWithBrand = async (users) => {
  return await Promise.all(
    users.map(async (u) => {
      if (u.role !== "BRAND_SELLER") return u;
      try {
        const res = await fetchWithAuth(`${STORE_API_BASE}/public/users/${u.id}/brand`);
        if (res.status === 404) {
          return { ...u, brand: null };
        }
        if (res.status === 204) {
          return { ...u, brand: null };
        }
        if (!res.ok) {
          return { ...u, brandFetchError: true };
        }
        const brand = await res.json();
        return { ...u, brand };
      } catch (e) {
        return { ...u, brandFetchError: true };
      }
    })
  );
};

export default function AdminUsers() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [globalError, setGlobalError] = useState(null);
  const [showNew, setShowNew] = useState(false);
  const [creating, setCreating] = useState(false);
  const [refreshKey, setRefreshKey] = useState(0);
  const [search, setSearch] = useState("");
  const navigate = useNavigate();

  const load = useCallback(async () => {
    setLoading(true);
    setGlobalError(null);
    try {
      const res = await fetchWithAuth(`${API_BASE}/admin/users`);
      if (res.status === 401) {
        logout();
        navigate("/login");
        return;
      }
      if (!res.ok) {
        const body = await res.json().catch(() => ({}));
        setGlobalError(body.error || `Failed to load users (${res.status})`);
        return;
      }
      const list = await res.json();
      const enriched = await enrichWithBrand(list);
      setUsers(enriched);
    } catch (e) {
      setGlobalError(e.message);
    } finally {
      setLoading(false);
    }
  }, [navigate]);

  useEffect(() => {
    load();
  }, [load, refreshKey]);

  const filteredUsers = useMemo(() => users.filter((u) => matchUser(u, search)), [users, search]);

  const handleCreate = async (form) => {
    setGlobalError(null);
    setCreating(true);
    try {
      const payload = {
        name: form.name.trim(),
        email: form.email.trim().toLowerCase(),
        role: form.role,
        provider: form.provider,
        emailVerified: form.emailVerified,
        providerId: form.provider === "LOCAL" ? null : form.providerId.trim(),
        password: form.provider === "LOCAL" ? form.password : null,
      };
      const res = await fetchWithAuth(`${API_BASE}/admin/users`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const body = await res.json().catch(() => ({}));
      if (!res.ok) {
        if (body.error && body.error.toLowerCase().includes("email already in use")) {
          setGlobalError("Email already in use");
        } else {
          setGlobalError(body.error || "Failed to create user");
        }
        return;
      }
      setShowNew(false);
      setRefreshKey((k) => k + 1);
    } catch (e) {
      setGlobalError(e.message);
    } finally {
      setCreating(false);
    }
  };

  const handleDeleted = async (id) => {
    try {
      const res = await fetchWithAuth(`${API_BASE}/admin/users/${id}`, {
        method: "DELETE",
      });
      if (!res.ok) {
        const body = await res.json().catch(() => ({}));
        alert("Delete failed: " + (body.error || res.status));
        return;
      }
      setUsers((u) => u.filter((x) => x.id !== id));
    } catch (e) {
      alert("Delete error: " + e.message);
    }
  };

  return (
    <div className="admin-page">
      <div className="admin-header">
        <div>
          <h2>Admin â€” User Management</h2>
          <div className="subtitle">Create, edit, delete, and search users. Only admins can access this.</div>
        </div>
        <div className="admin-actions">
          <SearchBar value={search} onChange={setSearch} />
          <button className="btn btn-secondary" onClick={() => setRefreshKey((k) => k + 1)}>
            Refresh
          </button>
          <button className="btn btn-primary" onClick={() => setShowNew((s) => !s)}>
            {showNew ? "Hide form" : "New user"}
          </button>
        </div>
      </div>

      {globalError && <div className="error-box">{globalError}</div>}

      {showNew && (
        <div className="card new-user-card">
          <UserForm isNew onSubmit={handleCreate} submitting={creating} onCancel={() => setShowNew(false)} />
        </div>
      )}

      <div className="table-wrapper">
        {loading ? (
          <div className="loading">Loading users...</div>
        ) : (
          <>
            {filteredUsers.length === 0 && <div className="no-results">No users match your search.</div>}
            <table className="users-table">
              <thead>
                <tr>
                  {[
                    "Avatar",
                    "ID",
                    "Name",
                    "Email",
                    "Provider",
                    "Role",
                    "Email Verified",
                    "Created At",
                    "Updated At",
                    "Actions",
                  ].map((h) => (
                    <th key={h}>{h}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {filteredUsers.length === 0 ? (
                  <tr>
                    <td colSpan={10} className="empty">
                      {users.length === 0 ? "No users." : "No users match the filter."}
                    </td>
                  </tr>
                ) : (
                  filteredUsers.map((u) => (
                    <UserRow
                      key={u.id}
                      user={u}
                      onUpdated={() => setRefreshKey((k) => k + 1)}
                      onDeleted={handleDeleted}
                    />
                  ))
                )}
              </tbody>
            </table>
          </>
        )}
      </div>
    </div>
  );
}
// src/pages/BrandRequestPage.jsx
import { useEffect, useMemo, useState, useCallback } from "react";
import { fetchWithAuth } from "../utils/auth.js";
import { BRAND_REQUESTS } from "../config.js";
import "../css/pages/brand-request.css"; // <â€” styles

const BLANK_LOGO = "/blank-logo.png";

export default function BrandRequestPage() {
  const [form, setForm] = useState({ name: "", slug: "" });
  const [file, setFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [mine, setMine] = useState(null);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [note, setNote] = useState("");
  const [cacheBust, setCacheBust] = useState(Date.now());

  const canCreateNew = useMemo(() => !mine || mine.status === "REJECTED", [mine]);

  const loadMine = useCallback(async () => {
    setLoading(true);
    setError("");
    try {
      const res = await fetchWithAuth(BRAND_REQUESTS.MINE());
      if (res.status === 404) {
        setMine(null);
      } else if (!res.ok) {
        throw new Error(`Failed to load: ${res.status}`);
      } else {
        const data = await res.json();
        setMine(data);
      }
    } catch (e) {
      setError(e.message || "Failed to load your brand request");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadMine();
    return () => {
      if (previewUrl) URL.revokeObjectURL(previewUrl);
    };
  }, [loadMine]);

  const handleChange = (e) => {
    setForm((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleFile = (e) => {
    const f = e.target.files?.[0] || null;
    setFile(f);
    if (previewUrl) URL.revokeObjectURL(previewUrl);
    setPreviewUrl(f ? URL.createObjectURL(f) : null);
  };

  const uploadLogo = async (requestId) => {
    if (!file) return;
    const fd = new FormData();
    fd.append("file", file);
    const res = await fetchWithAuth(BRAND_REQUESTS.LOGO_PUT(requestId), {
      method: "POST",
      body: fd,
    });
    if (!res.ok) {
      const errText = await res.text().catch(() => "");
      throw new Error(`Logo upload failed (${res.status}) ${errText}`);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    setError("");
    setNote("");
    try {
      if (mine && mine.status !== "REJECTED") {
        throw new Error("You already have a request. You cannot submit another.");
      }
      const res = await fetchWithAuth(BRAND_REQUESTS.LIST(), {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data.message || data.error || "Request failed");

      if (file) await uploadLogo(data.id);

      setNote("Request submitted!");
      setForm({ name: "", slug: "" });
      setFile(null);
      if (previewUrl) URL.revokeObjectURL(previewUrl);
      setPreviewUrl(null);
      setCacheBust(Date.now());
      await loadMine();
    } catch (err) {
      setError(err.message || "Network error");
    } finally {
      setSubmitting(false);
    }
  };

  const handleSaveLogo = async () => {
    if (!mine || !file) return;
    setError("");
    setNote("");
    try {
      await uploadLogo(mine.id);
      setNote("Logo uploaded.");
      setCacheBust(Date.now());
      await loadMine();
    } catch (e) {
      setError(e.message || "Failed to upload logo");
    } finally {
      if (previewUrl) URL.revokeObjectURL(previewUrl);
      setPreviewUrl(null);
      setFile(null);
    }
  };

  const logoSrc = mine
    ? (previewUrl || `${BRAND_REQUESTS.LOGO_GET(mine.id)}?t=${cacheBust}`)
    : BLANK_LOGO;

  const badgeClass =
    mine?.status === "APPROVED" ? "badge badge-ok" :
    mine?.status === "REJECTED" ? "badge badge-danger" :
    "badge badge-warn";

  return (
    <div className="brp">
      <h2 className="brp-title">Request a New Brand</h2>

      {loading ? (
        <p className="muted">Loading your request...</p>
      ) : (
        <>
          {mine && (
            <div className="brp-card" style={{ marginBottom: 16 }}>
              <div className="brp-row">
                <strong>Your request</strong>
                <span className={badgeClass}>{mine.status}</span>
              </div>

              <div className="brp-meta">
                <div><b>Name:</b> {mine.brandName ?? mine.name}</div>
                <div><b>Slug:</b> <span className="code">{mine.slug}</span></div>
                {/* show the rejection reason from backend */}
                {mine.reason && <div><b>Reason:</b> {mine.reason}</div>}
              </div>

              <div className="brp-section-label">LOGO</div>
              <div className="brp-logo-row">
                <div className="logo-box">
                  <img
                    src={logoSrc}
                    alt="Brand logo"
                    onError={(e) => { e.currentTarget.src = BLANK_LOGO; }}
                  />
                </div>

                <div className="brp-actions">
                  <label className="file-input">
                    Upload / Replace Logo
                    <input type="file" accept="image/*" onChange={handleFile} />
                  </label>
                  <button
                    type="button"
                    className="btn btn-ok"
                    onClick={handleSaveLogo}
                    disabled={!file}
                  >
                    Save Logo
                  </button>
                </div>
              </div>
            </div>
          )}

          {!canCreateNew && (
            <p className="muted">
              You canâ€™t submit another request while your current one is {mine?.status?.toLowerCase()}.
            </p>
          )}

          {canCreateNew && (
            <form className="brp-card brp-form" onSubmit={handleSubmit}>
              <div className="field">
                <label htmlFor="name">Name</label>
                <input
                  id="name"
                  className="input"
                  name="name"
                  value={form.name}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="field">
                <label htmlFor="slug">Slug</label>
                <input
                  id="slug"
                  className="input"
                  name="slug"
                  value={form.slug}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="field">
                <label>Logo (optional)</label>
                <label className="file-input">
                  Choose file
                  <input type="file" accept="image/*" onChange={handleFile} />
                </label>
              </div>

              <div className="brp-actions">
                <button type="submit" className="btn btn-primary" disabled={submitting}>
                  {submitting ? "Submitting..." : "Submit Request"}
                </button>
              </div>
            </form>
          )}
        </>
      )}

      {note && <div className="alert ok">{note}</div>}
      {error && <div className="alert err">{error}</div>}
    </div>
  );
}
import { useCallback, useEffect, useMemo, useState } from "react";
import { BRAND_REQUESTS } from "../config.js";
import { fetchWithAuth } from "../utils/auth.js";
import "../css/pages/brand-request-admin.css"

const STATUS_OPTS = ["ALL", "PENDING", "APPROVED", "REJECTED"];
const BLANK_LOGO = "/blank-logo.png"; // keep this in public/

export default function BrandRequestsAdmin() {
  const [status, setStatus] = useState("PENDING");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [items, setItems] = useState([]);
  const [actionNote, setActionNote] = useState("");

  const [fileMap, setFileMap] = useState({});
  const [previewMap, setPreviewMap] = useState({});
  const [logoOk, setLogoOk] = useState({});

  const listUrl = useMemo(
    () => (status === "ALL" ? BRAND_REQUESTS.LIST() : BRAND_REQUESTS.LIST(status)),
    [status]
  );

  const load = useCallback(async () => {
    setLoading(true);
    setError("");
    try {
      const res = await fetchWithAuth(listUrl);
      if (!res.ok) throw new Error(`Failed to load requests (${res.status})`);
      const data = await res.json();
      setItems(Array.isArray(data) ? data : []);
    } catch (e) {
      setError(e.message || "Failed to load requests");
    } finally {
      setLoading(false);
    }
  }, [listUrl]);

  useEffect(() => {
    load();
  }, [load]);

  const doApprove = async (id) => {
    setActionNote("");
    try {
      const res = await fetchWithAuth(BRAND_REQUESTS.APPROVE(id), { method: "PUT" });
      if (!res.ok) throw new Error(`Approve failed (${res.status})`);
      setItems((prev) => prev.map((it) => (it.id === id ? { ...it, status: "APPROVED" } : it)));
      setActionNote("Request approved.");
    } catch (e) {
      setError(e.message || "Approve failed");
    }
  };

  const doReject = async (id) => {
    const reason = window.prompt("Enter a rejection reason (optional):") || "";
    setActionNote("");
    try {
      const res = await fetchWithAuth(BRAND_REQUESTS.REJECT(id), {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ reason }),
      });
      if (!res.ok) throw new Error(`Reject failed (${res.status})`);
      setItems((prev) =>
        prev.map((it) =>
          it.id === id ? { ...it, status: "REJECTED", rejectionReason: reason } : it
        )
      );
      setActionNote("Request rejected.");
    } catch (e) {
      setError(e.message || "Reject failed");
    }
  };

  const setRowFile = (id, file) => {
    setFileMap((m) => ({ ...m, [id]: file || null }));
    setPreviewMap((pm) => {
      if (pm[id]) URL.revokeObjectURL(pm[id]);
      return { ...pm, [id]: file ? URL.createObjectURL(file) : null };
    });
  };

  const uploadLogo = async (id) => {
    const file = fileMap[id];
    if (!file) return;
    const fd = new FormData();
    fd.append("file", file);
    const res = await fetchWithAuth(BRAND_REQUESTS.LOGO_PUT(id), { method: "POST", body: fd });
    if (!res.ok) {
      const t = await res.text().catch(() => "");
      throw new Error(`Logo upload failed (${res.status}) ${t}`);
    }
    setActionNote("Logo uploaded.");
    setFileMap((m) => ({ ...m, [id]: null }));
    setPreviewMap((pm) => {
      if (pm[id]) URL.revokeObjectURL(pm[id]);
      const { [id]: _removed, ...rest } = pm;
      return rest;
    });
    setLogoOk((ok) => ({ ...ok, [id]: undefined }));
    await load();
  };

  const getLogoSrc = (id) => {
    if (previewMap[id]) return previewMap[id];
    return `${BRAND_REQUESTS.LOGO_GET(id)}?t=${Date.now()}`;
  };

  return (
    <div className="brand-requests">
      <header className="br-header">
        <h1>Brand Requests</h1>

        <div className="br-controls">
          <label className="br-select">
            <span>Status</span>
            <select value={status} onChange={(e) => setStatus(e.target.value)}>
              {STATUS_OPTS.map((s) => (
                <option key={s} value={s}>{s}</option>
              ))}
            </select>
          </label>

          <button className="btn" onClick={load} disabled={loading}>
            {loading ? "Loadingâ€¦" : "Refresh"}
          </button>

          {actionNote && <span className="br-note" aria-live="polite">{actionNote}</span>}
        </div>
      </header>

      {error && (
        <div className="alert error" role="alert">
          {error}
        </div>
      )}

      <div className="table-wrap">
        <table className="br-table">
          <thead>
            <tr>
              <th>Logo</th>
              <th>Brand</th>
              <th>Slug</th>
              <th>Applicant</th>
              <th>Status</th>
              <th>Requested At</th>
              <th>Actions</th>
            </tr>
          </thead>

          <tbody>
            {items.length === 0 && !loading && (
              <tr>
                <td colSpan="7" className="br-empty">No requests found.</td>
              </tr>
            )}

            {items.map((r) => (
              <tr key={r.id}>
                <td>
                  <div className="logo-cell">
                    <div className="logo-box">
                      <img
                        src={getLogoSrc(r.id)}
                        alt=""
                        onError={(e) => { e.currentTarget.src = BLANK_LOGO; }}
                      />
                    </div>

                    <div className="logo-actions">
                      <label className="file-input">
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => setRowFile(r.id, e.target.files?.[0] || null)}
                        />
                        Choose file
                      </label>

                      <button
                        type="button"
                        className="btn btn-secondary"
                        onClick={() => uploadLogo(r.id)}
                        disabled={!fileMap[r.id]}
                      >
                        Upload / Replace
                      </button>
                    </div>
                  </div>
                </td>

                <td>{r.brandName ?? r.name}</td>
                <td><code className="code">{r.slug}</code></td>
                <td>{r.applicantName || r.applicantEmail || r.applicantId || "â€”"}</td>

                <td>
                  <span
                    className={
                      "badge " +
                      (r.status === "PENDING"
                        ? "badge-warn"
                        : r.status === "APPROVED"
                        ? "badge-ok"
                        : "badge-danger")
                    }
                  >
                    {r.status}
                  </span>
                </td>

                <td>{r.createdAt ? new Date(r.createdAt).toLocaleString() : "â€”"}</td>

                <td className="actions">
                  {r.status === "PENDING" && (
                    <>
                      <button className="btn btn-ok" onClick={() => doApprove(r.id)} title="Approve">
                        Approve
                      </button>
                      <button className="btn btn-danger" onClick={() => doReject(r.id)} title="Reject">
                        Reject
                      </button>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
// src/pages/Dashboard.jsx
import { useEffect } from "react";

export default function Dashboard() {
  useEffect(() => {
    document.title = "Dashboard - Spark";
  }, []);

  return (
    <div className="page dashboard">
      <h2>Dashboard</h2>
      <p>This is your dashboard. Features coming soon.</p>
    </div>
  );
}
import { Link, useNavigate } from "react-router-dom";
import { useEffect } from "react";
import { isAuthenticated } from "../utils/auth.js";
import "../css/pages/home.css";

export default function Home() {
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated()) {
      navigate("/dashboard", { replace: true });
    }
  }, [navigate]);

  return (
    <div className="page home">
      <div className="hero">
        <div className="hero-content">
          <h1 className="hero-title">Welcome to Spark</h1>
          <p className="hero-subtitle">
            Securely log in or register, sync your profile picture, and manage
            your dashboard. OAuth with Google or GitHub is supported out of the box.
          </p>
          <div className="cta-buttons">
            <Link to="/login" className="btn-primary">
              Log In
            </Link>
            <Link to="/register" className="btn-secondary">
              Register
            </Link>
          </div>
          <div className="cta-note">
            Or go directly to your <Link to="/dashboard">dashboard</Link>.
          </div>
        </div>
        <div className="hero-graphic">
          {/* placeholder graphic or illustration */}
          <div
            style={{
              width: 220,
              height: 220,
              borderRadius: 16,
              background:
                "linear-gradient(135deg, rgba(99,102,241,0.2), rgba(99,102,241,0))",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: 48,
              fontWeight: "700",
              color: "#6366f1",
              userSelect: "none",
            }}
          >
            âœ¨
          </div>
        </div>
      </div>

    </div>
  );
}
import { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { setToken, isAuthenticated } from "../utils/auth.js";
import { AUTH, OAUTH2 } from "../config.js";
import "../css/pages/login.css";

const validateEmail = (email) => {
  if (!email.trim()) return "Email is required";
  const re = /^\S+@\S+\.\S+$/;
  if (!re.test(email.trim())) return "Invalid email format";
  return "";
};

const validatePassword = (pw) => {
  if (!pw) return "Password is required";
  return "";
};

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [fieldErrors, setFieldErrors] = useState({
    email: "",
    password: "",
  });
  const [serverError, setServerError] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated()) {
      navigate("/dashboard", { replace: true });
    }
  }, [navigate]);

  useEffect(() => {
    setFieldErrors({
      email: validateEmail(email),
      password: validatePassword(password),
    });
  }, [email, password]);

  const isFormValid = !validateEmail(email) && !validatePassword(password);

  const submit = async (e) => {
    e.preventDefault();
    if (submitting) return;
    if (!isFormValid) return;
    setServerError(null);
    setSubmitting(true);
    try {
      const res = await fetch(AUTH.LOGIN, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: email.trim().toLowerCase(),
          password,
        }),
      });
      const body = await res.json().catch(() => ({}));
      if (!res.ok) {
        if (
          body.error?.toLowerCase().includes("invalid credentials") ||
          res.status === 401
        ) {
          setServerError("Invalid email or password");
        } else {
          setServerError(body.error || "Login failed");
        }
        return;
      }
      setToken(body.token);
      navigate("/dashboard");
    } catch (err) {
      setServerError(err.message);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="page login">
      <h2>Login</h2>
      {serverError && (
        <div className="error" role="alert" aria-live="assertive">
          {serverError}
        </div>
      )}
      <form onSubmit={submit} className="login-form" noValidate>
        <div>
          <label htmlFor="email">Email</label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            autoComplete="username"
            disabled={submitting}
            aria-invalid={!!fieldErrors.email}
            aria-describedby="email-error"
          />
          {fieldErrors.email && (
            <div
              id="email-error"
              style={{ color: "#b91c1c", fontSize: 12, marginTop: 4 }}
            >
              {fieldErrors.email}
            </div>
          )}
        </div>
        <div>
          <label htmlFor="password">Password</label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            autoComplete="current-password"
            disabled={submitting}
            aria-invalid={!!fieldErrors.password}
            aria-describedby="password-error"
          />
          {fieldErrors.password && (
            <div
              id="password-error"
              style={{ color: "#b91c1c", fontSize: 12, marginTop: 4 }}
            >
              {fieldErrors.password}
            </div>
          )}
        </div>
        <button
          type="submit"
          className="primary"
          disabled={submitting || !isFormValid}
        >
          {submitting ? "Logging in..." : "Login"}
        </button>
      </form>
      <div className="oauth">
        <p>Or login with:</p>
        <div className="oauth-buttons">
          <button
            type="button"
            aria-label="Sign in with Google"
            className="oauth-btn google"
            onClick={() => (window.location.href = OAUTH2.GOOGLE)}
          >
            <span className="icon" aria-hidden="true">
              <img
                alt=""
                src="data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 46 46'><path fill='%234285F4' d='M23 20.5h11.3c-.5 2.5-2.2 4.6-4.5 5.7v4.7h7.3c4.3-4 6.8-10 6.8-16.9 0-1.1-.1-2.1-.3-3.1H23v6.3z'/><path fill='%2334A853' d='M23 26.5c1.9 0 3.6-.6 5-1.6l-5-4.1-5 4.1c1.4 1 3.1 1.6 5 1.6z'/><path fill='%23FBBC05' d='M17.9 22.9l-5-4.1c-1.1 2.2-1.1 4.8 0 7l5-4.1z'/><path fill='%23EA4335' d='M23 16.5c1.3 0 2.5.5 3.4 1.4l4.9-4.9C29.1 11 26.4 9.5 23 9.5c-3.4 0-6.1 1.5-8.3 3.9l4.9 4.9c.9-1 2.1-1.9 3.4-1.9z'/></svg>"
                style={{ width: 18, height: 18 }}
              />
            </span>
            <span>Google</span>
          </button>
          <button
            type="button"
            aria-label="Sign in with GitHub"
            className="oauth-btn github"
            onClick={() => (window.location.href = OAUTH2.GITHUB)}
          >
            <span className="icon" aria-hidden="true">
              <img
                alt=""
                src="data:image/svg+xml;utf8,<svg aria-hidden='true' height='16' viewBox='0 0 16 16' version='1.1' width='16' xmlns='http://www.w3.org/2000/svg'><path fill='%23ffffff' fill-rule='evenodd' d='M8 0C3.58 0 0 3.58 0 8a8 8 0 005.47 7.59c.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2 .37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82a7.7 7.7 0 012-.27c.68.003 1.36.092 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8 8 0 0016 8c0-4.42-3.58-8-8-8z'/></svg>"
                style={{ width: 18, height: 18 }}
              />
            </span>
            <span>GitHub</span>
          </button>
        </div>
      </div>

      <p>
        Don't have an account? <Link to="/register">Register</Link>.
      </p>
    </div>
  );
}
// src/pages/Dashboard.jsx
import { useEffect, useState } from "react";
import { fetchWithAuth, logout, setToken } from "../utils/auth.js";
import { API_BASE } from "../config.js";
import "../css/pages/dashboard.css";
import { useNavigate } from "react-router-dom";
import ProfileImageUploader from "../components/ProfileImageUploader.jsx";
import Avatar from "../components/Avatar.jsx";

export default function MyProfile() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [pwdState, setPwdState] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [pwdError, setPwdError] = useState(null);
  const [pwdSuccess, setPwdSuccess] = useState(null);
  const [changing, setChanging] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      try {
        const res = await fetchWithAuth(`${API_BASE}/auth/me`);
        if (!res.ok) {
          logout();
          navigate("/login");
          return;
        }
        const data = await res.json();
        setUser(data);
      } catch (e) {
        console.error("Failed to load user:", e);
        logout();
        navigate("/login");
      } finally {
        setLoading(false);
      }
    })();
  }, [navigate]);

  const doLogout = () => {
    logout();
    navigate("/login");
  };

  const handleImageUpdate = (newUrl) => {
    setUser((u) => (u ? { ...u, imageUrl: newUrl } : u));
  };

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    setPwdError(null);
    setPwdSuccess(null);
    if (changing) return;

    const { currentPassword, newPassword, confirmPassword } = pwdState;
    if (!currentPassword || !newPassword || !confirmPassword) {
      setPwdError("All fields are required.");
      return;
    }
    if (newPassword.length < 8) {
      setPwdError("New password must be at least 8 characters.");
      return;
    }
    if (newPassword !== confirmPassword) {
      setPwdError("New password and confirmation do not match.");
      return;
    }
    if (currentPassword === newPassword) {
      setPwdError("New password must be different from current password.");
      return;
    }

    setChanging(true);
    try {
      const res = await fetchWithAuth(`${API_BASE}/auth/me/change-password`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          currentPassword,
          newPassword,
        }),
      });
      if (!res.ok) {
        const body = await res.json().catch(() => ({}));
        throw new Error(body.error || "Failed to change password");
      }
      const data = await res.json();
      if (data.token) {
        setToken(data.token);
      }
      setPwdSuccess("Password changed successfully.");
      setPwdState({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      });
    } catch (err) {
      setPwdError(err.message);
    } finally {
      setChanging(false);
    }
  };

  if (loading) {
    return <div className="page dashboard">Loading...</div>;
  }

  if (!user) {
    return <div className="page dashboard">User info not available.</div>;
  }

  return (
    <div className="page dashboard">
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <h2>My Profile</h2>
        <button onClick={doLogout}>Logout</button>
      </div>

      <div
        className="profile-wrapper"
        style={{ display: "flex", gap: 24, alignItems: "flex-start" }}
      >
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            gap: 12,
          }}
        >
          <Avatar imageUrl={user.imageUrl} size={96} alt={user.name} />
          <ProfileImageUploader
            currentUrl={user.imageUrl}
            onUpdate={handleImageUpdate}
          />
        </div>

        <div className="profile">
          <p>
            <strong>Name:</strong> {user.name}
          </p>
          <p>
            <strong>Email:</strong> {user.email}
          </p>
          <p>
            <strong>Provider:</strong> {user.provider}
          </p>
          <p>
            <strong>Role:</strong> {user.role}
          </p>
        </div>
      </div>

      <div
        className="password-card"
        style={{
          marginTop: 24,
          maxWidth: 560,
          background: "#fff",
          borderRadius: 12,
          padding: 24,
          boxShadow: "0 24px 60px -10px rgba(0,0,0,0.08)",
          display: "flex",
          flexDirection: "column",
          gap: 14,
        }}
      >
        <h3 style={{ margin: 0, fontSize: "1.5rem" }}>Change Password</h3>
        {user.provider !== "LOCAL" ? (
          <p style={{ margin: 0 }}>
            Your account is authenticated via <strong>{user.provider}</strong>.
            Password is managed through that provider.
          </p>
        ) : (
          <form onSubmit={handlePasswordChange} style={{ display: "flex", flexDirection: "column", gap: 12, marginTop: 4 }} noValidate>
            {pwdError && (
              <div
                style={{
                  background: "#ffecec",
                  color: "#a94442",
                  padding: "8px 12px",
                  borderRadius: 6,
                  fontSize: 14,
                }}
              >
                {pwdError}
              </div>
            )}
            {pwdSuccess && (
              <div
                style={{
                  background: "#e6ffed",
                  color: "#1f7a3a",
                  padding: "8px 12px",
                  borderRadius: 6,
                  fontSize: 14,
                }}
              >
                {pwdSuccess}
              </div>
            )}
            <div style={{ display: "flex", flexDirection: "column", gap: 6 }}>
              <label htmlFor="current-password" style={{ fontWeight: 600, fontSize: 12, textTransform: "uppercase", letterSpacing: 1 }}>
                Current password
              </label>
              <input
                id="current-password"
                type="password"
                value={pwdState.currentPassword}
                onChange={(e) =>
                  setPwdState((s) => ({ ...s, currentPassword: e.target.value }))
                }
                required
                disabled={changing}
                autoComplete="current-password"
                style={{
                  padding: "10px 14px",
                  borderRadius: 8,
                  border: "1px solid #d1d9e6",
                  fontSize: 14,
                  outline: "none",
                }}
              />
            </div>
            <div style={{ display: "flex", flexDirection: "column", gap: 6 }}>
              <label htmlFor="new-password" style={{ fontWeight: 600, fontSize: 12, textTransform: "uppercase", letterSpacing: 1 }}>
                New password
              </label>
              <input
                id="new-password"
                type="password"
                value={pwdState.newPassword}
                onChange={(e) =>
                  setPwdState((s) => ({ ...s, newPassword: e.target.value }))
                }
                required
                disabled={changing}
                autoComplete="new-password"
                minLength={8}
                style={{
                  padding: "10px 14px",
                  borderRadius: 8,
                  border: "1px solid #d1d9e6",
                  fontSize: 14,
                  outline: "none",
                }}
              />
            </div>
            <div style={{ display: "flex", flexDirection: "column", gap: 6 }}>
              <label htmlFor="confirm-password" style={{ fontWeight: 600, fontSize: 12, textTransform: "uppercase", letterSpacing: 1 }}>
                Confirm new password
              </label>
              <input
                id="confirm-password"
                type="password"
                value={pwdState.confirmPassword}
                onChange={(e) =>
                  setPwdState((s) => ({ ...s, confirmPassword: e.target.value }))
                }
                required
                disabled={changing}
                autoComplete="new-password"
                minLength={8}
                style={{
                  padding: "10px 14px",
                  borderRadius: 8,
                  border: "1px solid #d1d9e6",
                  fontSize: 14,
                  outline: "none",
                }}
              />
            </div>
            <div>
              <button
                type="submit"
                disabled={changing}
                style={{
                  cursor: "pointer",
                  padding: "10px 18px",
                  border: "none",
                  borderRadius: 8,
                  background: "#6366f1",
                  color: "#fff",
                  fontWeight: 600,
                  fontSize: "0.95rem",
                  transition: "filter .2s ease",
                  marginTop: 4,
                }}
              >
                {changing ? "Changing..." : "Change Password"}
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}
// src/pages/Navbar.jsx
import { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { fetchWithAuth, logout, isAuthenticated } from "../utils/auth.js";
import { API_BASE } from "../config.js";
import Avatar from "../components/Avatar.jsx";

export default function Navbar() {
  const [user, setUser] = useState(null);
  const navigate = useNavigate();

  const fetchUser = async () => {
    if (!isAuthenticated()) {
      setUser(null);
      return;
    }
    try {
      const res = await fetchWithAuth(`${API_BASE}/auth/me`);
      if (res.ok) {
        const data = await res.json();
        setUser(data);
      } else {
        logout();
        setUser(null);
      }
    } catch (e) {
      console.warn("Failed to fetch current user in navbar", e);
      logout();
      setUser(null);
    }
  };

  useEffect(() => {
    fetchUser();

    const handleAuthChange = () => {
      if (!isAuthenticated()) {
        setUser(null);
      } else {
        fetchUser();
      }
    };
    window.addEventListener("authChange", handleAuthChange);
    return () => {
      window.removeEventListener("authChange", handleAuthChange);
    };
  }, []);

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <nav
      className="navbar"
      style={{
        padding: "12px 24px",
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        background: "#fff",
        boxShadow: "0 4px 16px rgba(0,0,0,0.05)",
        fontFamily:
          '-apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
        gap: 12,
      }}
    >
      <div className="logo">
        <Link
          to="/"
          style={{
            textDecoration: "none",
            fontWeight: 700,
            fontSize: 18,
            color: "#6366f1",
          }}
        >
          Sparkâœ¨
        </Link>
      </div>
      <div
        className="links"
        style={{ display: "flex", alignItems: "center", gap: 16 }}
      >
        {user ? (
          <div style={{ display: "flex", alignItems: "center", gap: 12 }}>
            {/* Admin dashboard link */}
            {user.role === "ADMIN" && (
              <Link
                to="/admin"
                style={{
                  marginRight: 8,
                  textDecoration: "none",
                  color: "#6366f1",
                  fontWeight: 600,
                  fontSize: 14,
                }}
              >
                Admin
              </Link>
            )}

            {/* Request Brand (USER only) */}
            {user.role === "USER" && (
              <Link
                to="/request-brand"
                style={{
                  textDecoration: "none",
                  color: "#6366f1",
                  fontWeight: 600,
                  fontSize: 14,
                }}
              >
                Request Brand
              </Link>
            )}

            {/* Brand Requests page (ADMIN only) */}
            {user.role === "ADMIN" && (
              <Link
                to="/admin/brand-requests"
                style={{
                  textDecoration: "none",
                  color: "#6366f1",
                  fontWeight: 600,
                  fontSize: 14,
                }}
              >
                Brand Requests
              </Link>
            )}

            {/* Profile */}
            <Link
              to="/profile"
              style={{
                display: "flex",
                alignItems: "center",
                gap: 8,
                textDecoration: "none",
                color: "#1f2d3a",
              }}
            >
              <Avatar imageUrl={user.imageUrl} size={32} alt={user.name} />
              <span style={{ fontSize: 14, fontWeight: 600 }}>{user.name}</span>
            </Link>

            {/* Logout */}
            <button
              type="button"
              onClick={handleLogout}
              aria-label="Logout"
              style={{
                padding: "8px 14px",
                background: "#f5f7fa",
                color: "#1f2d3a",
                border: "1px solid #d1d9e6",
                borderRadius: 6,
                cursor: "pointer",
                fontSize: 14,
                fontWeight: 600,
                transition: "background .2s ease, filter .2s ease",
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.filter = "brightness(1.03)";
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.filter = "none";
              }}
              onFocus={(e) => {
                e.currentTarget.style.boxShadow =
                  "0 0 0 3px rgba(99,102,241,0.5)";
                e.currentTarget.style.outline = "none";
              }}
              onBlur={(e) => {
                e.currentTarget.style.boxShadow = "none";
              }}
            >
              Logout
            </button>
          </div>
        ) : (
          <>
            <Link
              to="/login"
              style={{
                textDecoration: "none",
                color: "#6366f1",
                fontWeight: 600,
              }}
            >
              Login
            </Link>
            <Link
              to="/register"
              style={{
                textDecoration: "none",
                color: "#6366f1",
                fontWeight: 600,
              }}
            >
              Register
            </Link>
          </>
        )}
      </div>
    </nav>
  );
}
// src/pages/OAuth2RedirectHandler.jsx
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { setToken } from "../utils/auth.js";

export default function OAuth2RedirectHandler() {
  const navigate = useNavigate();

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const token = params.get("token");
    if (token) {
      setToken(token);

      // remove token from the address bar to avoid leaking it in history
      window.history.replaceState({}, "", "/dashboard");

      navigate("/dashboard", { replace: true });
    } else {
      navigate("/login", { replace: true });
    }
  }, [navigate]);

  return <div>Processing login...</div>;
}
// src/pages/Register.jsx
import { useState, useEffect } from "react";
import { useNavigate, Link } from "react-router-dom";
import { setToken, isAuthenticated } from "../utils/auth.js";
import { AUTH, OAUTH2 } from "../config.js";
import "../css/pages/login.css";

const PersonIcon = ({ size = 64 }) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 64 64"
    aria-hidden="true"
    focusable="false"
    style={{ display: "block" }}
  >
    <circle cx="32" cy="32" r="32" fill="#e2e8f0" />
    <path
      fill="#ffffff"
      d="M32 34c6.627 0 12-5.373 12-12S38.627 10 32 10s-12 5.373-12 12 5.373 12 12 12zm0 4c-8.837 0-16 4.463-16 9.98V54h32v-2.02C48 42.463 40.837 38 32 38z"
    />
  </svg>
);

function AvatarDisplay({ preview, name, size = 64 }) {
  const initial = name?.trim()?.[0]?.toUpperCase();
  const circleStyle = {
    width: size,
    height: size,
    borderRadius: "50%",
    background: "#6366f1",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    fontSize: size * 0.5,
    color: "#fff",
    fontWeight: "700",
    userSelect: "none",
  };

  if (preview) {
    return (
      <div
        style={{
          width: size,
          height: size,
          borderRadius: "50%",
          overflow: "hidden",
          flexShrink: 0,
          background: "#f0f4f9",
          position: "relative",
        }}
      >
        <img
          src={preview}
          alt="avatar preview"
          style={{
            width: "100%",
            height: "100%",
            objectFit: "cover",
            display: "block",
          }}
          onError={(e) => {
            e.currentTarget.src = "/default-avatar.png";
          }}
        />
      </div>
    );
  } else if (initial) {
    return <div style={circleStyle}>{initial}</div>;
  } else {
    return (
      <div
        style={{
          width: size,
          height: size,
          borderRadius: "50%",
          background: "#f0f4f9",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          flexShrink: 0,
        }}
      >
        <PersonIcon size={size * 0.9} />
      </div>
    );
  }
}

const validateName = (name) => {
  if (!name.trim()) return "Name is required";
  if (name.trim().length < 2) return "Name must be at least 2 characters";
  return "";
};

const validateEmail = (email) => {
  if (!email.trim()) return "Email is required";
  const re = /^\S+@\S+\.\S+$/;
  if (!re.test(email.trim())) return "Invalid email format";
  return "";
};

const validatePassword = (pw) => {
  if (!pw) return "Password is required";
  if (pw.length < 8) return "Password must be at least 8 characters";
  return "";
};

export default function Register() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [imageFile, setImageFile] = useState(null);
  const [tempPreview, setTempPreview] = useState(null);
  const [fieldErrors, setFieldErrors] = useState({
    name: "",
    email: "",
    password: "",
  });
  const [serverError, setServerError] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const [triedSubmit, setTriedSubmit] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated()) {
      navigate("/dashboard", { replace: true });
    }
  }, [navigate]);

  const handleImageSelect = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    if (!["image/png", "image/jpeg"].includes(file.type)) {
      setServerError("Only PNG/JPEG allowed for profile image");
      return;
    }
    if (file.size > 2 * 1024 * 1024) {
      setServerError("Image too large (max 2MB)");
      return;
    }
    setServerError(null);
    setImageFile(file);
    setTempPreview(URL.createObjectURL(file));
  };

  const clearImage = () => {
    setImageFile(null);
    setTempPreview(null);
  };

  const submit = async (e) => {
    e.preventDefault();
    if (submitting) return;
    setTriedSubmit(true);
    setServerError(null);

    const errors = {
      name: validateName(name),
      email: validateEmail(email),
      password: validatePassword(password),
    };
    setFieldErrors(errors);

    const hasErrors = Object.values(errors).some(Boolean);
    if (hasErrors) {
      return;
    }

    setSubmitting(true);
    try {
      const payload = {
        name: name.trim(),
        email: email.trim().toLowerCase(),
        password,
      };
      const res = await fetch(AUTH.REGISTER, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const body = await res.json().catch(() => ({}));
      if (!res.ok) {
        if (
          body.error?.toLowerCase().includes("email already in use") ||
          body.error?.toLowerCase().includes("email already")
        ) {
          setFieldErrors((f) => ({ ...f, email: "Email already in use" }));
        } else {
          setServerError(body.error || "Registration failed");
        }
        return;
      }

      setToken(body.token);

      if (imageFile) {
        const form = new FormData();
        form.append("image", imageFile);
        const uploadRes = await fetch(AUTH.UPLOAD_IMAGE, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${body.token}`,
          },
          body: form,
        });
        if (!uploadRes.ok) {
          console.warn("Profile image upload failed during registration");
        }
      }

      navigate("/dashboard");
    } catch (err) {
      setServerError(err.message);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="page login">
      <h2>Register</h2>
      {serverError && (
        <div className="error" role="alert" aria-live="assertive">
          {serverError}
        </div>
      )}
      <form
        onSubmit={submit}
        className="login-form"
        style={{ gap: 8 }}
        noValidate
        aria-describedby="form-error"
      >
        <div>
          <label htmlFor="name">Name</label>
          <input
            id="name"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            minLength={2}
            autoComplete="name"
            disabled={submitting}
            aria-invalid={!!(triedSubmit && fieldErrors.name)}
            aria-describedby="name-error"
          />
          {triedSubmit && fieldErrors.name && (
            <div
              id="name-error"
              style={{ color: "#b91c1c", fontSize: 12, marginTop: 4 }}
            >
              {fieldErrors.name}
            </div>
          )}
        </div>
        <div>
          <label htmlFor="email">Email</label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            autoComplete="username"
            disabled={submitting}
            aria-invalid={!!(triedSubmit && fieldErrors.email)}
            aria-describedby="email-error"
          />
          {triedSubmit && fieldErrors.email && (
            <div
              id="email-error"
              style={{ color: "#b91c1c", fontSize: 12, marginTop: 4 }}
            >
              {fieldErrors.email}
            </div>
          )}
        </div>
        <div>
          <label htmlFor="password">Password (min 8 chars)</label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            minLength={8}
            autoComplete="new-password"
            disabled={submitting}
            aria-invalid={!!(triedSubmit && fieldErrors.password)}
            aria-describedby="password-error"
          />
          {triedSubmit && fieldErrors.password && (
            <div
              id="password-error"
              style={{ color: "#b91c1c", fontSize: 12, marginTop: 4 }}
            >
              {fieldErrors.password}
            </div>
          )}
        </div>

        <div>
          <label>Profile Image (optional)</label>
          <div
            style={{
              display: "flex",
              alignItems: "center",
              gap: 12,
              flexWrap: "wrap",
            }}
          >
            <AvatarDisplay preview={tempPreview} name={name} size={64} />
            <div style={{ display: "flex", flexDirection: "column", gap: 6 }}>
              <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
                <label
                  htmlFor="image-upload"
                  style={{
                    cursor: "pointer",
                    padding: "8px 14px",
                    background: "#6366f1",
                    color: "#fff",
                    borderRadius: 6,
                    fontSize: "0.9rem",
                    fontWeight: 600,
                    display: "inline-flex",
                    alignItems: "center",
                    gap: 6,
                    border: "none",
                  }}
                >
                  {imageFile ? "Change image" : "Choose image"}
                  <input
                    id="image-upload"
                    type="file"
                    accept="image/png,image/jpeg"
                    onChange={handleImageSelect}
                    disabled={submitting}
                    style={{ display: "none" }}
                  />
                </label>
                {imageFile && (
                  <button
                    type="button"
                    aria-label="Remove selected image"
                    onClick={clearImage}
                    disabled={submitting}
                    style={{
                      background: "transparent",
                      border: "none",
                      cursor: "pointer",
                      fontSize: 18,
                      lineHeight: 1,
                      padding: 4,
                    }}
                  >
                    Ã—
                  </button>
                )}
              </div>
              <div style={{ fontSize: 12, color: "#555" }}>
                PNG or JPEG, max 2MB
              </div>
              {tempPreview && (
                <div style={{ fontSize: 12, color: "#555" }}>
                  Selected: {imageFile?.name}
                </div>
              )}
            </div>
          </div>
        </div>

        <button type="submit" className="primary" disabled={submitting}>
          {submitting ? "Registering..." : "Register"}
        </button>
      </form>

      <div className="oauth">
        <p>Or sign up with:</p>
        <div className="oauth-buttons">
          <button
            type="button"
            aria-label="Sign up with Google"
            className="oauth-btn google"
            onClick={() => (window.location.href = OAUTH2.GOOGLE)}
          >
            <span className="icon" aria-hidden="true">
              <img
                alt=""
                src="data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 46 46'><path fill='%234285F4' d='M23 20.5h11.3c-.5 2.5-2.2 4.6-4.5 5.7v4.7h7.3c4.3-4 6.8-10 6.8-16.9 0-1.1-.1-2.1-.3-3.1H23v6.3z'/><path fill='%2334A853' d='M23 26.5c1.9 0 3.6-.6 5-1.6l-5-4.1-5 4.1c1.4 1 3.1 1.6 5 1.6z'/><path fill='%23FBBC05' d='M17.9 22.9l-5-4.1c-1.1 2.2-1.1 4.8 0 7l5-4.1z'/><path fill='%23EA4335' d='M23 16.5c1.3 0 2.5.5 3.4 1.4l4.9-4.9C29.1 11 26.4 9.5 23 9.5c-3.4 0-6.1 1.5-8.3 3.9l4.9 4.9c.9-1 2.1-1.9 3.4-1.9z'/></svg>"
                style={{ width: 18, height: 18 }}
              />
            </span>
            <span>Sign up with Google</span>
          </button>

          <button
            type="button"
            aria-label="Sign up with GitHub"
            className="oauth-btn github"
            onClick={() => (window.location.href = OAUTH2.GITHUB)}
          >
            <span className="icon" aria-hidden="true">
              <img
                alt=""
                src="data:image/svg+xml;utf8,<svg aria-hidden='true' height='16' viewBox='0 0 16 16' version='1.1' width='16' xmlns='http://www.w3.org/2000/svg'><path fill='%23ffffff' fill-rule='evenodd' d='M8 0C3.58 0 0 3.58 0 8a8 8 0 005.47 7.59c.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2 .37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82a7.7 7.7 0 012-.27c.68.003 1.36.092 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8 8 0 0016 8c0-4.42-3.58-8-8-8z'/></svg>"
                style={{ width: 18, height: 18 }}
              />
            </span>
            <span>Sign up with GitHub</span>
          </button>
        </div>
      </div>

      <p>
        Already have an account? <Link to="/login">Log in</Link>.
      </p>
    </div>
  );
}
// src/utils/auth.js
const TOKEN_KEY = "jwt_token";

export function setToken(token) {
  localStorage.setItem(TOKEN_KEY, token);
  window.dispatchEvent(new Event("authChange"));
}
export function getToken() {
  return localStorage.getItem(TOKEN_KEY);
}
export function logout() {
  localStorage.removeItem(TOKEN_KEY);
  window.dispatchEvent(new Event("authChange"));
}

function parseJwt(token) {
  try {
    const payload = token.split(".")[1];
    const padded = payload + "=".repeat((4 - (payload.length % 4)) % 4);
    return JSON.parse(atob(padded.replace(/-/g, "+").replace(/_/g, "/")));
  } catch {
    return null;
  }
}

export function isAuthenticated() {
  const token = getToken();
  if (!token) return false;
  const data = parseJwt(token);
  if (!data || !data.exp) return false;
  return Date.now() / 1000 < data.exp;
}

/**
 * Convenience: returns decoded JWT payload or null.
 */
export function getJwtPayload() {
  const token = getToken();
  if (!token) return null;
  return parseJwt(token);
}

export async function fetchWithAuth(url, opts = {}) {
  const token = getToken();
  const headers = {
    ...(opts.headers || {}),
    Authorization: token ? `Bearer ${token}` : "",
  };
  const res = await fetch(url, { ...opts, headers });
  if (res.status === 401) {
    logout();
    window.location.href = "/login";
    throw new Error("Unauthorized");
  }
  return res;
}
